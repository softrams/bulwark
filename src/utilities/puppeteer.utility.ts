import { UserRequest } from '../interfaces/user-request.interface';
import { Response } from 'express';
import { insertReportAuditRecord } from '../routes/report-audit.controller';
import puppeteer from 'puppeteer';
import * as path from 'path';
import * as fs from 'fs';
import { hasAssetReadAccess } from './role.utility';

/**
 * @description API backend for report generation with Puppeteer
 * @param {UserRequest} req orgId, assetId, assessmentId
 * @param {Response} res contains all data associated and generates a
 * new html page with PDF Report
 * @returns a new page generated by Puppeteer with a Report in PDF format
 */
export const generateReport = async (req: UserRequest, res: Response) => {
  try {
    if (!req.body.orgId || !req.body.assetId || !req.body.assessmentId) {
      return res.status(400).send('Invalid report parameters');
    }
    
    const hasReadAccess = await hasAssetReadAccess(req, +req.body.assetId);
    if (!hasReadAccess) {
      return res
        .status(404)
        .json('Failed to generate report. Please contact an administrator.');
    }
    
    const url =
      process.env.NODE_ENV === 'production'
        ? `${process.env.SERVER_ADDRESS}:${process.env.PORT}/#/organization/${req.body.orgId}/asset/${req.body.assetId}/assessment/${req.body.assessmentId}/report/puppeteer`
        : `${process.env.DEV_URL}/#/organization/${req.body.orgId}/asset/${req.body.assetId}/assessment/${req.body.assessmentId}/report/puppeteer`;
    
    // Create temp directory if it doesn't exist
    const tempDir = path.join(__dirname, '../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const filePath = path.join(tempDir, 'temp_report.pdf');
    const jwtToken = req.headers.authorization;
    
    const browser = await puppeteer.launch({
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      headless: true  // Use standard headless mode for compatibility
    });
    
    const page = await browser.newPage();
    
    // Set JWT token in localStorage
    await page.evaluateOnNewDocument((token) => {
      localStorage.clear();
      localStorage.setItem('AUTH_TOKEN', token);
    }, jwtToken);
    
    await page.goto(url, { waitUntil: 'networkidle0' });
    
    // Generate PDF
    await page.pdf({ 
      path: filePath, 
      format: 'a4',
      printBackground: true,
      margin: {
        top: '20px',
        right: '20px', 
        bottom: '20px',
        left: '20px'
      }
    });
    
    await browser.close();
    
    // Send file to client
    const file = fs.createReadStream(filePath);
    const stat = fs.statSync(filePath);
    
    res.setHeader('Content-Length', stat.size);
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=report.pdf');
    
    file.pipe(res);
    
    // Record the report generation
    await insertReportAuditRecord(+req.user, req.body.assessmentId);
    
    // Delete the temporary file after it's sent
    file.on('close', () => {
      fs.unlink(filePath, (err) => {
        if (err) {
          console.error('Error removing temporary PDF file:', err);
        } else {
          console.info('Temporary PDF file removed');
        }
      });
    });
    
  } catch (error) {
    console.error('Error generating report:', error);
    return res.status(500).json('An error occurred while generating the report');
  }
};