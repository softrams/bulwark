{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrgFormComponent = void 0;\nconst forms_1 = require(\"@angular/forms\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/forms\");\nconst i2 = require(\"../app.service\");\nconst i3 = require(\"@angular/router\");\nconst i4 = require(\"../alert/alert.service\");\nconst i5 = require(\"../auth.service\");\nconst i6 = require(\"@angular/common\");\nconst i7 = require(\"primeng/inputtext\");\nconst i8 = require(\"primeng/button\");\nfunction OrgFormComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.orgForm.valid);\n  }\n}\nlet OrgFormComponent = /*#__PURE__*/(() => {\n  class OrgFormComponent {\n    constructor(fb, appService, route, activatedRoute, alertService, authService) {\n      this.fb = fb;\n      this.appService = appService;\n      this.route = route;\n      this.activatedRoute = activatedRoute;\n      this.alertService = alertService;\n      this.authService = authService;\n      this.fileToUpload = null;\n      this.createForm();\n    }\n    ngOnInit() {\n      this.activatedRoute.data.subscribe(({\n        organization\n      }) => {\n        this.isAdmin = this.authService.isAdmin();\n        if (organization) {\n          this.orgModel = organization;\n          if (!this.isAdmin) {\n            this.disableForm();\n          }\n          this.rebuildForm();\n        }\n      });\n      this.activatedRoute.params.subscribe(params => {\n        this.orgId = params.id;\n      });\n    }\n    ngOnChanges() {\n      this.rebuildForm();\n    }\n    /**\n     * Function required to create the active form in Angular\n     */\n    createForm() {\n      this.orgForm = this.fb.group({\n        name: ['', [forms_1.Validators.required]]\n      });\n    }\n    /**\n     * Function required to rebuild the form on changes in Angular\n     */\n    rebuildForm() {\n      this.orgForm.reset({\n        name: this.orgModel.name\n      });\n    }\n    disableForm() {\n      this.orgForm.disable();\n    }\n    /**\n     * Function required to process the files attached to the form\n     * @param files array of files to work with\n     */\n    handleFileInput(files) {\n      this.fileToUpload = files.item(0);\n    }\n    /**\n     * Function required to process the form data\n     * @param contact form data object holding organization data\n     */\n    onSubmit(contact) {\n      this.orgModel = contact.value;\n      if (this.fileToUpload) {\n        this.appService.upload(this.fileToUpload).subscribe(fileId => {\n          this.createOrUpdateOrg(this.orgModel);\n        });\n      } else {\n        this.createOrUpdateOrg(this.orgModel);\n      }\n    }\n    /**\n     * Function required to create or update an organization based on org ID\n     * navigates the user back to the main dashboard after action is executed\n     * @param org contains organization data object\n     */\n    createOrUpdateOrg(org) {\n      if (this.orgId) {\n        this.appService.updateOrg(this.orgId, org).subscribe(success => {\n          this.navigateToDashboard();\n          this.alertService.success(success);\n        });\n      } else {\n        this.appService.createOrg(org).subscribe(success => {\n          this.navigateToDashboard();\n          this.alertService.success(success);\n        });\n      }\n    }\n    /**\n     * Function responsible for directing the user back to the main dashboard\n     */\n    navigateToDashboard() {\n      this.route.navigate(['dashboard']);\n    }\n    static #_ = this.ɵfac = function OrgFormComponent_Factory(t) {\n      return new (t || OrgFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AppService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: OrgFormComponent,\n      selectors: [[\"app-org-form\"]],\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 8,\n      vars: 2,\n      consts: [[1, \"container\", \"col-md-6\", \"col-12\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"for\", \"orgName\"], [\"formControlName\", \"name\", \"type\", \"text\", \"id\", \"orgName\", \"placeholder\", \"Enter in an organization name\", \"pInputText\", \"\", 1, \"form-control\"], [\"class\", \"btn btn-primary float-right\", \"type\", \"submit\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Submit Data\", \"pButton\", \"\", 3, \"disabled\", 4, \"ngIf\"], [\"type\", \"button\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Back to Dashboard\", \"pButton\", \"\", 1, \"btn\", \"btn-secondary\", \"float-right\", 2, \"margin-right\", \"5px\", 3, \"click\"], [\"type\", \"submit\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Submit Data\", \"pButton\", \"\", 1, \"btn\", \"btn-primary\", \"float-right\", 3, \"disabled\"]],\n      template: function OrgFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function OrgFormComponent_Template_form_ngSubmit_1_listener() {\n            return ctx.onSubmit(ctx.orgForm);\n          });\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3);\n          i0.ɵɵtext(4, \"Organization Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, OrgFormComponent_button_6_Template, 1, 1, \"button\", 5);\n          i0.ɵɵelementStart(7, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function OrgFormComponent_Template_button_click_7_listener() {\n            return ctx.navigateToDashboard();\n          });\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.orgForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.isAdmin);\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i7.InputText, i8.ButtonDirective]\n    });\n  }\n  return OrgFormComponent;\n})();\nexports.OrgFormComponent = OrgFormComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}