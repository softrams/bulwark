{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, Header, Footer, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nconst _c0 = [\"headerchkbox\"];\nconst _c1 = [[[\"p-header\"]], [[\"p-footer\"]]];\nconst _c2 = [\"p-header\", \"p-footer\"];\nconst _c3 = a0 => ({\n  \"p-listbox p-component\": true,\n  \"p-disabled\": a0\n});\nconst _c4 = a0 => ({\n  \"p-checkbox-disabled\": a0\n});\nconst _c5 = (a0, a1, a2) => ({\n  \"p-highlight\": a0,\n  \"p-focus\": a1,\n  \"p-disabled\": a2\n});\nconst _c6 = a0 => ({\n  \"pi pi-check\": a0\n});\nconst _c7 = a0 => ({\n  $implicit: a0\n});\nconst _c8 = (a0, a1) => ({\n  \"p-listbox-item\": true,\n  \"p-highlight\": a0,\n  \"p-disabled\": a1\n});\nconst _c9 = (a0, a1) => ({\n  $implicit: a0,\n  index: a1\n});\nconst _c10 = a0 => ({\n  \"p-highlight\": a0\n});\nfunction Listbox_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵprojection(1);\n    i0.ɵɵtemplate(2, Listbox_div_1_ng_container_2_Template, 1, 0, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.headerTemplate);\n  }\n}\nfunction Listbox_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"input\", 15);\n    i0.ɵɵlistener(\"focus\", function Listbox_div_2_div_1_Template_input_focus_2_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onHeaderCheckboxFocus());\n    })(\"blur\", function Listbox_div_2_div_1_Template_input_blur_2_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onHeaderCheckboxBlur());\n    })(\"keydown.space\", function Listbox_div_2_div_1_Template_input_keydown_space_2_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleAll($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"div\", 16, 1);\n    i0.ɵɵlistener(\"click\", function Listbox_div_2_div_1_Template_div_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleAll($event));\n    });\n    i0.ɵɵelement(5, \"span\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c4, ctx_r0.disabled || ctx_r0.toggleAllDisabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r0.allChecked)(\"disabled\", ctx_r0.disabled || ctx_r0.toggleAllDisabled);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(7, _c5, ctx_r0.allChecked, ctx_r0.headerCheckboxFocus, ctx_r0.disabled || ctx_r0.toggleAllDisabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c6, ctx_r0.allChecked));\n  }\n}\nfunction Listbox_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"input\", 19);\n    i0.ɵɵlistener(\"input\", function Listbox_div_2_div_2_Template_input_input_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onFilter($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r0.filterValue || \"\")(\"disabled\", ctx_r0.disabled);\n    i0.ɵɵattribute(\"placeholder\", ctx_r0.filterPlaceHolder)(\"aria-label\", ctx_r0.ariaFilterLabel);\n  }\n}\nfunction Listbox_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, Listbox_div_2_div_1_Template, 6, 13, \"div\", 11)(2, Listbox_div_2_div_2_Template, 3, 4, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.checkbox && ctx_r0.multiple && ctx_r0.showToggleAll);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.filter);\n  }\n}\nfunction Listbox_ng_container_5_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const optgroup_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.getOptionGroupLabel(optgroup_r4) || \"empty\");\n  }\n}\nfunction Listbox_ng_container_5_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_ng_container_5_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_ng_container_5_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 22);\n    i0.ɵɵtemplate(1, Listbox_ng_container_5_ng_template_1_span_1_Template, 2, 1, \"span\", 7)(2, Listbox_ng_container_5_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, Listbox_ng_container_5_ng_template_1_ng_container_3_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const optgroup_r4 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    const itemslist_r5 = i0.ɵɵreference(8);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.groupTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.groupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c7, optgroup_r4));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", itemslist_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(7, _c7, ctx_r0.getOptionGroupChildren(optgroup_r4)));\n  }\n}\nfunction Listbox_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Listbox_ng_container_5_ng_template_1_Template, 4, 9, \"ng-template\", 21);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.optionsToRender);\n  }\n}\nfunction Listbox_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Listbox_ng_container_6_ng_container_1_Template, 1, 0, \"ng-container\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const itemslist_r5 = i0.ɵɵreference(8);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", itemslist_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, ctx_r0.optionsToRender));\n  }\n}\nfunction Listbox_ng_template_7_li_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 27);\n    i0.ɵɵelement(2, \"span\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c4, ctx_r0.disabled || ctx_r0.isOptionDisabled(option_r7)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c10, ctx_r0.isSelected(option_r7)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c6, ctx_r0.isSelected(option_r7)));\n  }\n}\nfunction Listbox_ng_template_7_li_0_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.getOptionLabel(option_r7));\n  }\n}\nfunction Listbox_ng_template_7_li_0_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_ng_template_7_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 26);\n    i0.ɵɵlistener(\"click\", function Listbox_ng_template_7_li_0_Template_li_click_0_listener($event) {\n      const option_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onOptionClick($event, option_r7));\n    })(\"dblclick\", function Listbox_ng_template_7_li_0_Template_li_dblclick_0_listener($event) {\n      const option_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onOptionDoubleClick($event, option_r7));\n    })(\"touchend\", function Listbox_ng_template_7_li_0_Template_li_touchend_0_listener() {\n      const option_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onOptionTouchEnd(option_r7));\n    })(\"keydown\", function Listbox_ng_template_7_li_0_Template_li_keydown_0_listener($event) {\n      const option_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onOptionKeyDown($event, option_r7));\n    });\n    i0.ɵɵtemplate(1, Listbox_ng_template_7_li_0_div_1_Template, 3, 9, \"div\", 11)(2, Listbox_ng_template_7_li_0_span_2_Template, 2, 1, \"span\", 7)(3, Listbox_ng_template_7_li_0_ng_container_3_Template, 1, 0, \"ng-container\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c8, ctx_r0.isSelected(option_r7), ctx_r0.isOptionDisabled(option_r7)));\n    i0.ɵɵattribute(\"tabindex\", ctx_r0.disabled || ctx_r0.isOptionDisabled(option_r7) ? null : \"0\")(\"aria-label\", ctx_r0.getOptionLabel(option_r7))(\"aria-selected\", ctx_r0.isSelected(option_r7));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.checkbox && ctx_r0.multiple);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.itemTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(11, _c9, option_r7, i_r8));\n  }\n}\nfunction Listbox_ng_template_7_li_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.emptyFilterMessageLabel, \" \");\n  }\n}\nfunction Listbox_ng_template_7_li_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 2);\n  }\n}\nfunction Listbox_ng_template_7_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 28);\n    i0.ɵɵtemplate(1, Listbox_ng_template_7_li_1_ng_container_1_Template, 2, 1, \"ng-container\", 29)(2, Listbox_ng_template_7_li_1_ng_container_2_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.emptyFilterTemplate && !ctx_r0.emptyTemplate)(\"ngIfElse\", ctx_r0.emptyFilter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.emptyFilterTemplate || ctx_r0.emptyTemplate);\n  }\n}\nfunction Listbox_ng_template_7_li_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.emptyMessageLabel, \" \");\n  }\n}\nfunction Listbox_ng_template_7_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 3);\n  }\n}\nfunction Listbox_ng_template_7_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 28);\n    i0.ɵɵtemplate(1, Listbox_ng_template_7_li_2_ng_container_1_Template, 2, 1, \"ng-container\", 29)(2, Listbox_ng_template_7_li_2_ng_container_2_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.emptyTemplate)(\"ngIfElse\", ctx_r0.empty);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.emptyTemplate);\n  }\n}\nfunction Listbox_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Listbox_ng_template_7_li_0_Template, 4, 14, \"li\", 24)(1, Listbox_ng_template_7_li_1_Template, 3, 3, \"li\", 25)(2, Listbox_ng_template_7_li_2_Template, 3, 3, \"li\", 25);\n  }\n  if (rf & 2) {\n    const optionsToDisplay_r9 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", optionsToDisplay_r9);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.hasFilter() && ctx_r0.isEmpty(optionsToDisplay_r9));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hasFilter() && ctx_r0.isEmpty(optionsToDisplay_r9));\n  }\n}\nfunction Listbox_div_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Listbox_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵtemplate(2, Listbox_div_9_ng_container_2_Template, 1, 0, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate);\n  }\n}\nconst LISTBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Listbox),\n  multi: true\n};\nlet Listbox = /*#__PURE__*/(() => {\n  class Listbox {\n    constructor(el, cd, filterService, config) {\n      this.el = el;\n      this.cd = cd;\n      this.filterService = filterService;\n      this.config = config;\n      this.checkbox = false;\n      this.filter = false;\n      this.filterMatchMode = 'contains';\n      this.metaKeySelection = true;\n      this.showToggleAll = true;\n      this.optionGroupChildren = \"items\";\n      this.onChange = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onDblClick = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n    }\n    get options() {\n      return this._options;\n    }\n    set options(val) {\n      this._options = val;\n      if (this.hasFilter()) this.activateFilter();\n    }\n    get filterValue() {\n      return this._filterValue;\n    }\n    set filterValue(val) {\n      this._filterValue = val;\n      this.activateFilter();\n    }\n    ngOnInit() {\n      this.translationSubscription = this.config.translationObserver.subscribe(() => {\n        this.cd.markForCheck();\n      });\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n          case 'group':\n            this.groupTemplate = item.template;\n            break;\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n          case 'empty':\n            this.emptyTemplate = item.template;\n            break;\n          case 'emptyfilter':\n            this.emptyFilterTemplate = item.template;\n            break;\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n    getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option.label != undefined ? option.label : option;\n    }\n    getOptionGroupChildren(optionGroup) {\n      return this.optionGroupChildren ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;\n    }\n    getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup.label != undefined ? optionGroup.label : optionGroup;\n    }\n    getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : this.optionLabel || option.value === undefined ? option : option.value;\n    }\n    isOptionDisabled(option) {\n      return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : option.disabled !== undefined ? option.disabled : false;\n    }\n    writeValue(value) {\n      this.value = value;\n      this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    onOptionClick(event, option) {\n      if (this.disabled || this.isOptionDisabled(option) || this.readonly) {\n        return;\n      }\n      if (this.multiple) {\n        if (this.checkbox) this.onOptionClickCheckbox(event, option);else this.onOptionClickMultiple(event, option);\n      } else {\n        this.onOptionClickSingle(event, option);\n      }\n      this.onClick.emit({\n        originalEvent: event,\n        option: option,\n        value: this.value\n      });\n      this.optionTouched = false;\n    }\n    onOptionTouchEnd(option) {\n      if (this.disabled || this.isOptionDisabled(option) || this.readonly) {\n        return;\n      }\n      this.optionTouched = true;\n    }\n    onOptionDoubleClick(event, option) {\n      if (this.disabled || this.isOptionDisabled(option) || this.readonly) {\n        return;\n      }\n      this.onDblClick.emit({\n        originalEvent: event,\n        option: option,\n        value: this.value\n      });\n    }\n    onOptionClickSingle(event, option) {\n      let selected = this.isSelected(option);\n      let valueChanged = false;\n      let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        let metaKey = event.metaKey || event.ctrlKey;\n        if (selected) {\n          if (metaKey) {\n            this.value = null;\n            valueChanged = true;\n          }\n        } else {\n          this.value = this.getOptionValue(option);\n          valueChanged = true;\n        }\n      } else {\n        this.value = selected ? null : this.getOptionValue(option);\n        valueChanged = true;\n      }\n      if (valueChanged) {\n        this.onModelChange(this.value);\n        this.onChange.emit({\n          originalEvent: event,\n          value: this.value\n        });\n      }\n    }\n    onOptionClickMultiple(event, option) {\n      let selected = this.isSelected(option);\n      let valueChanged = false;\n      let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        let metaKey = event.metaKey || event.ctrlKey;\n        if (selected) {\n          if (metaKey) {\n            this.removeOption(option);\n          } else {\n            this.value = [this.getOptionValue(option)];\n          }\n          valueChanged = true;\n        } else {\n          this.value = metaKey ? this.value || [] : [];\n          this.value = [...this.value, this.getOptionValue(option)];\n          valueChanged = true;\n        }\n      } else {\n        if (selected) {\n          this.removeOption(option);\n        } else {\n          this.value = [...(this.value || []), this.getOptionValue(option)];\n        }\n        valueChanged = true;\n      }\n      if (valueChanged) {\n        this.onModelChange(this.value);\n        this.onChange.emit({\n          originalEvent: event,\n          value: this.value\n        });\n      }\n    }\n    onOptionClickCheckbox(event, option) {\n      if (this.disabled || this.readonly) {\n        return;\n      }\n      let selected = this.isSelected(option);\n      if (selected) {\n        this.removeOption(option);\n      } else {\n        this.value = this.value ? this.value : [];\n        this.value = [...this.value, this.getOptionValue(option)];\n      }\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n    removeOption(option) {\n      this.value = this.value.filter(val => !ObjectUtils.equals(val, this.getOptionValue(option), this.dataKey));\n    }\n    isSelected(option) {\n      let selected = false;\n      let optionValue = this.getOptionValue(option);\n      if (this.multiple) {\n        if (this.value) {\n          for (let val of this.value) {\n            if (ObjectUtils.equals(val, optionValue, this.dataKey)) {\n              selected = true;\n              break;\n            }\n          }\n        }\n      } else {\n        selected = ObjectUtils.equals(this.value, optionValue, this.dataKey);\n      }\n      return selected;\n    }\n    get allChecked() {\n      let optionsToRender = this.optionsToRender;\n      if (!optionsToRender || optionsToRender.length === 0) {\n        return false;\n      } else {\n        let selectedDisabledItemsLength = 0;\n        let unselectedDisabledItemsLength = 0;\n        let selectedEnabledItemsLength = 0;\n        let visibleOptionsLength = this.group ? 0 : this.optionsToRender.length;\n        for (let option of optionsToRender) {\n          if (!this.group) {\n            let disabled = this.isOptionDisabled(option);\n            let selected = this.isSelected(option);\n            if (disabled) {\n              if (selected) selectedDisabledItemsLength++;else unselectedDisabledItemsLength++;\n            } else {\n              if (selected) selectedEnabledItemsLength++;else return false;\n            }\n          } else {\n            for (let opt of this.getOptionGroupChildren(option)) {\n              let disabled = this.isOptionDisabled(opt);\n              let selected = this.isSelected(opt);\n              if (disabled) {\n                if (selected) selectedDisabledItemsLength++;else unselectedDisabledItemsLength++;\n              } else {\n                if (selected) selectedEnabledItemsLength++;else {\n                  return false;\n                }\n              }\n              visibleOptionsLength++;\n            }\n          }\n        }\n        return visibleOptionsLength === selectedDisabledItemsLength || visibleOptionsLength === selectedEnabledItemsLength || selectedEnabledItemsLength && visibleOptionsLength === selectedEnabledItemsLength + unselectedDisabledItemsLength + selectedDisabledItemsLength;\n      }\n    }\n    get optionsToRender() {\n      return this._filteredOptions || this.options;\n    }\n    get emptyMessageLabel() {\n      return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    get emptyFilterMessageLabel() {\n      return this.emptyFilterMessage || this.config.getTranslation(TranslationKeys.EMPTY_FILTER_MESSAGE);\n    }\n    hasFilter() {\n      return this._filterValue && this._filterValue.trim().length > 0;\n    }\n    isEmpty(optionsToDisplay) {\n      return !optionsToDisplay || optionsToDisplay && optionsToDisplay.length === 0;\n    }\n    onFilter(event) {\n      this._filterValue = event.target.value;\n      this.activateFilter();\n    }\n    activateFilter() {\n      if (this.hasFilter() && this._options) {\n        if (this.group) {\n          let searchFields = (this.optionLabel || 'label').split(',');\n          let filteredGroups = [];\n          for (let optgroup of this.options) {\n            let filteredSubOptions = this.filterService.filter(this.getOptionGroupChildren(optgroup), searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n            if (filteredSubOptions && filteredSubOptions.length) {\n              filteredGroups.push({\n                ...optgroup,\n                ...{\n                  [this.optionGroupChildren]: filteredSubOptions\n                }\n              });\n            }\n          }\n          this._filteredOptions = filteredGroups;\n        } else {\n          this._filteredOptions = this._options.filter(option => this.filterService.filters[this.filterMatchMode](this.getOptionLabel(option), this._filterValue, this.filterLocale));\n        }\n      } else {\n        this._filteredOptions = null;\n      }\n    }\n    get toggleAllDisabled() {\n      let optionsToRender = this.optionsToRender;\n      if (!optionsToRender || optionsToRender.length === 0) {\n        return true;\n      } else {\n        for (let option of optionsToRender) {\n          if (!this.isOptionDisabled(option)) return false;\n        }\n        return true;\n      }\n    }\n    toggleAll(event) {\n      if (this.disabled || this.toggleAllDisabled || this.readonly) {\n        return;\n      }\n      let allChecked = this.allChecked;\n      if (allChecked) this.uncheckAll();else this.checkAll();\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n      event.preventDefault();\n    }\n    checkAll() {\n      let optionsToRender = this.optionsToRender;\n      let val = [];\n      optionsToRender.forEach(opt => {\n        if (!this.group) {\n          let optionDisabled = this.isOptionDisabled(opt);\n          if (!optionDisabled || optionDisabled && this.isSelected(opt)) {\n            val.push(this.getOptionValue(opt));\n          }\n        } else {\n          let subOptions = this.getOptionGroupChildren(opt);\n          if (subOptions) {\n            subOptions.forEach(option => {\n              let optionDisabled = this.isOptionDisabled(option);\n              if (!optionDisabled || optionDisabled && this.isSelected(option)) {\n                val.push(this.getOptionValue(option));\n              }\n            });\n          }\n        }\n      });\n      this.value = val;\n    }\n    uncheckAll() {\n      let optionsToRender = this.optionsToRender;\n      let val = [];\n      optionsToRender.forEach(opt => {\n        if (!this.group) {\n          let optionDisabled = this.isOptionDisabled(opt);\n          if (optionDisabled && this.isSelected(opt)) {\n            val.push(this.getOptionValue(opt));\n          }\n        } else {\n          if (opt.items) {\n            opt.items.forEach(option => {\n              let optionDisabled = this.isOptionDisabled(option);\n              if (optionDisabled && this.isSelected(option)) {\n                val.push(this.getOptionValue(option));\n              }\n            });\n          }\n        }\n      });\n      this.value = val;\n    }\n    onOptionKeyDown(event, option) {\n      if (this.readonly) {\n        return;\n      }\n      let item = event.currentTarget;\n      switch (event.which) {\n        //down\n        case 40:\n          var nextItem = this.findNextItem(item);\n          if (nextItem) {\n            nextItem.focus();\n          }\n          event.preventDefault();\n          break;\n        //up\n        case 38:\n          var prevItem = this.findPrevItem(item);\n          if (prevItem) {\n            prevItem.focus();\n          }\n          event.preventDefault();\n          break;\n        //enter\n        case 13:\n          this.onOptionClick(event, option);\n          event.preventDefault();\n          break;\n      }\n    }\n    findNextItem(item) {\n      let nextItem = item.nextElementSibling;\n      if (nextItem) return DomHandler.hasClass(nextItem, 'p-disabled') || DomHandler.isHidden(nextItem) || DomHandler.hasClass(nextItem, 'p-listbox-item-group') ? this.findNextItem(nextItem) : nextItem;else return null;\n    }\n    findPrevItem(item) {\n      let prevItem = item.previousElementSibling;\n      if (prevItem) return DomHandler.hasClass(prevItem, 'p-disabled') || DomHandler.isHidden(prevItem) || DomHandler.hasClass(prevItem, 'p-listbox-item-group') ? this.findPrevItem(prevItem) : prevItem;else return null;\n    }\n    onHeaderCheckboxFocus() {\n      this.headerCheckboxFocus = true;\n    }\n    onHeaderCheckboxBlur() {\n      this.headerCheckboxFocus = false;\n    }\n    ngOnDestroy() {\n      if (this.translationSubscription) {\n        this.translationSubscription.unsubscribe();\n      }\n    }\n  }\n  Listbox.ɵfac = function Listbox_Factory(t) {\n    return new (t || Listbox)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FilterService), i0.ɵɵdirectiveInject(i1.PrimeNGConfig));\n  };\n  Listbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Listbox,\n    selectors: [[\"p-listbox\"]],\n    contentQueries: function Listbox_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, Header, 5);\n        i0.ɵɵcontentQuery(dirIndex, Footer, 5);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerFacet = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerFacet = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Listbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCheckboxViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      multiple: \"multiple\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      listStyle: \"listStyle\",\n      listStyleClass: \"listStyleClass\",\n      readonly: \"readonly\",\n      disabled: \"disabled\",\n      checkbox: \"checkbox\",\n      filter: \"filter\",\n      filterMatchMode: \"filterMatchMode\",\n      filterLocale: \"filterLocale\",\n      metaKeySelection: \"metaKeySelection\",\n      dataKey: \"dataKey\",\n      showToggleAll: \"showToggleAll\",\n      optionLabel: \"optionLabel\",\n      optionValue: \"optionValue\",\n      optionGroupChildren: \"optionGroupChildren\",\n      optionGroupLabel: \"optionGroupLabel\",\n      optionDisabled: \"optionDisabled\",\n      ariaFilterLabel: \"ariaFilterLabel\",\n      filterPlaceHolder: \"filterPlaceHolder\",\n      emptyFilterMessage: \"emptyFilterMessage\",\n      emptyMessage: \"emptyMessage\",\n      group: \"group\",\n      options: \"options\",\n      filterValue: \"filterValue\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onClick: \"onClick\",\n      onDblClick: \"onDblClick\"\n    },\n    features: [i0.ɵɵProvidersFeature([LISTBOX_VALUE_ACCESSOR])],\n    ngContentSelectors: _c2,\n    decls: 10,\n    vars: 15,\n    consts: [[\"itemslist\", \"\"], [\"headerchkbox\", \"\"], [\"emptyFilter\", \"\"], [\"empty\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"class\", \"p-listbox-header\", 4, \"ngIf\"], [\"role\", \"listbox\", \"aria-multiselectable\", \"multiple\", 1, \"p-listbox-list\"], [4, \"ngIf\"], [\"class\", \"p-listbox-footer\", 4, \"ngIf\"], [1, \"p-listbox-header\"], [4, \"ngTemplateOutlet\"], [\"class\", \"p-checkbox p-component\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"p-listbox-filter-container\", 4, \"ngIf\"], [1, \"p-checkbox\", \"p-component\", 3, \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", \"readonly\", \"readonly\", 3, \"focus\", \"blur\", \"keydown.space\", \"checked\", \"disabled\"], [1, \"p-checkbox-box\", 3, \"click\", \"ngClass\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [1, \"p-listbox-filter-container\"], [\"type\", \"text\", 1, \"p-listbox-filter\", \"p-inputtext\", \"p-component\", 3, \"input\", \"value\", \"disabled\"], [1, \"p-listbox-filter-icon\", \"pi\", \"pi-search\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-listbox-item-group\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"pRipple\", \"\", \"role\", \"option\", 3, \"ngClass\", \"click\", \"dblclick\", \"touchend\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"p-listbox-empty-message\", 4, \"ngIf\"], [\"pRipple\", \"\", \"role\", \"option\", 3, \"click\", \"dblclick\", \"touchend\", \"keydown\", \"ngClass\"], [1, \"p-checkbox-box\", 3, \"ngClass\"], [1, \"p-listbox-empty-message\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"p-listbox-footer\"]],\n    template: function Listbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1);\n        i0.ɵɵelementStart(0, \"div\", 4);\n        i0.ɵɵtemplate(1, Listbox_div_1_Template, 3, 1, \"div\", 5)(2, Listbox_div_2_Template, 3, 2, \"div\", 5);\n        i0.ɵɵelementStart(3, \"div\", 4)(4, \"ul\", 6);\n        i0.ɵɵtemplate(5, Listbox_ng_container_5_Template, 2, 1, \"ng-container\", 7)(6, Listbox_ng_container_6_Template, 2, 4, \"ng-container\", 7)(7, Listbox_ng_template_7_Template, 3, 3, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(9, Listbox_div_9_Template, 3, 1, \"div\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c3, ctx.disabled))(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.headerFacet || ctx.headerTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.checkbox && ctx.multiple && ctx.showToggleAll || ctx.filter);\n        i0.ɵɵadvance();\n        i0.ɵɵclassMap(ctx.listStyleClass);\n        i0.ɵɵproperty(\"ngClass\", \"p-listbox-list-wrapper\")(\"ngStyle\", ctx.listStyle);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.group);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.group);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.footerFacet || ctx.footerTemplate);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgStyle, i2.NgIf, i2.NgTemplateOutlet, i2.NgForOf, i3.Ripple],\n    styles: [\".p-listbox-list-wrapper{overflow:auto}.p-listbox-list{list-style-type:none;margin:0;padding:0}.p-listbox-item{cursor:pointer;position:relative;overflow:hidden;display:flex;align-items:center;-webkit-user-select:none;user-select:none}.p-listbox-header{display:flex;align-items:center}.p-listbox-filter-container{position:relative;flex:1 1 auto}.p-listbox-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-listbox-filter{width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Listbox;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ListboxModule = /*#__PURE__*/(() => {\n  class ListboxModule {}\n  ListboxModule.ɵfac = function ListboxModule_Factory(t) {\n    return new (t || ListboxModule)();\n  };\n  ListboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ListboxModule\n  });\n  ListboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedModule, RippleModule], SharedModule]\n  });\n  return ListboxModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LISTBOX_VALUE_ACCESSOR, Listbox, ListboxModule };\n//# sourceMappingURL=primeng-listbox.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}