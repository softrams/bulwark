{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppInterceptor = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst environment_1 = require(\"../environments/environment\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"./loader.service\");\nconst i2 = require(\"./alert/alert.service\");\nconst i3 = require(\"./auth.service\");\nconst i4 = require(\"@angular/router\");\nlet AppInterceptor = /*#__PURE__*/(() => {\n  class AppInterceptor {\n    constructor(loaderService, alertService, authService, router) {\n      this.loaderService = loaderService;\n      this.alertService = alertService;\n      this.authService = authService;\n      this.router = router;\n    }\n    logout() {\n      this.authService.logout();\n      this.router.navigate(['login']);\n    }\n    intercept(req, next) {\n      const authToken = this.authService.getUserToken();\n      if (authToken) {\n        req = req.clone({\n          headers: req.headers.set('Authorization', authToken)\n        });\n      }\n      this.loaderService.show();\n      return next.handle(req).pipe((0, operators_1.finalize)(() => this.loaderService.hide()), (0, operators_1.catchError)(error => {\n        if (error.error instanceof ErrorEvent) {\n          // A client-side or network error occurred. Handle it accordingly.\n          if (environment_1.environment.production) {\n            console.error('An error occurred:', error.error.message);\n          }\n        } else {\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          if (environment_1.environment.production) {\n            console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n          }\n          switch (error.status) {\n            case 500:\n              error.error = 'Internal Server Error';\n              this.alertService.error(error.error);\n              break;\n            case 403:\n              this.alertService.warn(error.error);\n              break;\n            case 404:\n              this.alertService.warn(error.error);\n              break;\n            case 401:\n              const url = environment_1.environment.apiUrl;\n              if (error.url === url + '/refresh') {\n                this.logout();\n                this.alertService.error('You have been logged out due to inactivity');\n                break;\n              }\n              return this.authService.refreshSession().pipe((0, operators_1.switchMap)(tokens => {\n                this.authService.setTokens(tokens);\n                req = req.clone({\n                  headers: req.headers.set('Authorization', tokens.token)\n                });\n                return next.handle(req);\n              }));\n            case 400:\n              this.alertService.warn(error.error);\n              break;\n            default:\n              error.error = 'Internal Server Error';\n              this.alertService.error(error.error);\n          }\n        }\n        // return an observable with a user-facing error message\n        return [];\n      }));\n    }\n    static #_ = this.ɵfac = function AppInterceptor_Factory(t) {\n      return new (t || AppInterceptor)(i0.ɵɵinject(i1.LoaderService), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppInterceptor,\n      factory: AppInterceptor.ɵfac\n    });\n  }\n  return AppInterceptor;\n})();\nexports.AppInterceptor = AppInterceptor;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}