{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthService = void 0;\nconst environment_1 = require(\"../environments/environment\");\nconst jwt_decode_1 = require(\"jwt-decode\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.api = environment_1.environment.apiUrl;\n      this.isLoggedIn = false;\n    }\n    login(creds) {\n      return this.http.post(`${this.api}/login`, creds);\n    }\n    logout() {\n      localStorage.removeItem('REFRESH_TOKEN');\n      localStorage.removeItem('AUTH_TOKEN');\n    }\n    setTokens(tokens) {\n      localStorage.setItem('AUTH_TOKEN', tokens.token);\n      localStorage.setItem('REFRESH_TOKEN', tokens.refreshToken);\n    }\n    getUserToken() {\n      return localStorage.getItem('AUTH_TOKEN');\n    }\n    getUserFromToken() {\n      return (0, jwt_decode_1.default)(localStorage.getItem('AUTH_TOKEN'));\n    }\n    isAdmin() {\n      const token = this.getUserFromToken();\n      let found = false;\n      // tslint:disable-next-line: no-string-literal\n      found = token['admin'];\n      return found;\n    }\n    getRefreshToken() {\n      return localStorage.getItem('REFRESH_TOKEN');\n    }\n    forgotPassword(email) {\n      return this.http.patch(`${this.api}/forgot-password`, email);\n    }\n    passwordReset(creds) {\n      return this.http.patch(`${this.api}/password-reset`, creds);\n    }\n    updatePassword(oldPassword, newPassword, confirmNewPassword) {\n      return this.http.patch(`${this.api}/user/password`, {\n        oldPassword,\n        newPassword,\n        confirmNewPassword\n      });\n    }\n    updateUserEmail(email, newEmail) {\n      return this.http.post(`${this.api}/user/email`, {\n        email,\n        newEmail\n      });\n    }\n    validateUserEmailRequest(password, uuid) {\n      return this.http.post(`${this.api}/user/email/validate`, {\n        password,\n        uuid\n      });\n    }\n    revokeUserEmail() {\n      return this.http.post(`${this.api}/user/email/revoke`, null);\n    }\n    refreshSession() {\n      const refreshToken = this.getRefreshToken();\n      return this.http.post(`${this.api}/refresh`, {\n        refreshToken\n      });\n    }\n    generateApiKey() {\n      return this.http.post(`${this.api}/user/key`, null);\n    }\n    getApiKeyInfo() {\n      return this.http.get(`${this.api}/user/key`);\n    }\n    getApiKeysInfo() {\n      return this.http.get(`${this.api}/keys`);\n    }\n    deactivateApiKey(id) {\n      return this.http.patch(`${this.api}/user/key/${id}`, null);\n    }\n    adminDeactivateApiKey(id) {\n      return this.http.patch(`${this.api}/key/${id}`, null);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexports.AuthService = AuthService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}