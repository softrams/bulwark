{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport Chart from 'chart.js/auto';\nlet UIChart = /*#__PURE__*/(() => {\n  class UIChart {\n    constructor(el) {\n      this.el = el;\n      this.plugins = [];\n      this.responsive = true;\n      this.onDataSelect = new EventEmitter();\n      this._options = {};\n    }\n    get data() {\n      return this._data;\n    }\n    set data(val) {\n      this._data = val;\n      this.reinit();\n    }\n    get options() {\n      return this._options;\n    }\n    set options(val) {\n      this._options = val;\n      this.reinit();\n    }\n    ngAfterViewInit() {\n      this.initChart();\n      this.initialized = true;\n    }\n    onCanvasClick(event) {\n      if (this.chart) {\n        const element = this.chart.getElementsAtEventForMode(event, 'nearest', {\n          intersect: true\n        }, false);\n        const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', {\n          intersect: true\n        }, false);\n        if (element && element[0] && dataset) {\n          this.onDataSelect.emit({\n            originalEvent: event,\n            element: element[0],\n            dataset: dataset\n          });\n        }\n      }\n    }\n    initChart() {\n      let opts = this.options || {};\n      opts.responsive = this.responsive;\n      // allows chart to resize in responsive mode\n      if (opts.responsive && (this.height || this.width)) {\n        opts.maintainAspectRatio = false;\n      }\n      this.chart = new Chart(this.el.nativeElement.children[0].children[0], {\n        type: this.type,\n        data: this.data,\n        options: this.options,\n        plugins: this.plugins\n      });\n    }\n    getCanvas() {\n      return this.el.nativeElement.children[0].children[0];\n    }\n    getBase64Image() {\n      return this.chart.toBase64Image();\n    }\n    generateLegend() {\n      if (this.chart) {\n        return this.chart.generateLegend();\n      }\n    }\n    refresh() {\n      if (this.chart) {\n        this.chart.update();\n      }\n    }\n    reinit() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.initChart();\n      }\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.initialized = false;\n        this.chart = null;\n      }\n    }\n  }\n  UIChart.ɵfac = function UIChart_Factory(t) {\n    return new (t || UIChart)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  UIChart.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UIChart,\n    selectors: [[\"p-chart\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      type: \"type\",\n      plugins: \"plugins\",\n      width: \"width\",\n      height: \"height\",\n      responsive: \"responsive\",\n      data: \"data\",\n      options: \"options\"\n    },\n    outputs: {\n      onDataSelect: \"onDataSelect\"\n    },\n    decls: 2,\n    vars: 6,\n    consts: [[2, \"position\", \"relative\"], [3, \"click\"]],\n    template: function UIChart_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"canvas\", 1);\n        i0.ɵɵlistener(\"click\", function UIChart_Template_canvas_click_1_listener($event) {\n          return ctx.onCanvasClick($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"width\", ctx.responsive && !ctx.width ? null : ctx.width)(\"height\", ctx.responsive && !ctx.height ? null : ctx.height);\n        i0.ɵɵadvance();\n        i0.ɵɵattribute(\"width\", ctx.responsive && !ctx.width ? null : ctx.width)(\"height\", ctx.responsive && !ctx.height ? null : ctx.height);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return UIChart;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ChartModule = /*#__PURE__*/(() => {\n  class ChartModule {}\n  ChartModule.ɵfac = function ChartModule_Factory(t) {\n    return new (t || ChartModule)();\n  };\n  ChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ChartModule\n  });\n  ChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ChartModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartModule, UIChart };\n//# sourceMappingURL=primeng-chart.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}