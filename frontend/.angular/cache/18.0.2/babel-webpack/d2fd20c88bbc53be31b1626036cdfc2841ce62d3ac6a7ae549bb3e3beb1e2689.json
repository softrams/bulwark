{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, HostListener, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, Output, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ZIndexUtils } from 'primeng/utils';\nimport * as i3 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nconst _c0 = [\"input\"];\nconst _c1 = (a0, a1) => ({\n  showTransitionParams: a0,\n  hideTransitionParams: a1\n});\nconst _c2 = a0 => ({\n  value: \"visible\",\n  params: a0\n});\nconst _c3 = a0 => ({\n  \"width\": a0\n});\nfunction Password_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 7);\n    i0.ɵɵlistener(\"click\", function Password_i_3_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.clear());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Password_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 8);\n    i0.ɵɵlistener(\"click\", function Password_i_4_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onMaskToggle());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.toggleIconClass());\n  }\n}\nfunction Password_div_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Password_div_5_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Password_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Password_div_5_ng_container_3_ng_container_1_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.contentTemplate);\n  }\n}\nfunction Password_div_5_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 12);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.strengthClass())(\"ngStyle\", i0.ɵɵpureFunction1(3, _c3, ctx_r2.meter ? ctx_r2.meter.width : \"\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.infoText);\n  }\n}\nfunction Password_div_5_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Password_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8, 1);\n    i0.ɵɵlistener(\"click\", function Password_div_5_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onOverlayClick($event));\n    })(\"@overlayAnimation.start\", function Password_div_5_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onAnimationStart($event));\n    })(\"@overlayAnimation.done\", function Password_div_5_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onAnimationEnd($event));\n    });\n    i0.ɵɵtemplate(2, Password_div_5_ng_container_2_Template, 1, 0, \"ng-container\", 9)(3, Password_div_5_ng_container_3_Template, 2, 1, \"ng-container\", 10)(4, Password_div_5_ng_template_4_Template, 4, 5, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor)(6, Password_div_5_ng_container_6_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const content_r6 = i0.ɵɵreference(5);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", \"p-password-panel p-component\")(\"@overlayAnimation\", i0.ɵɵpureFunction1(9, _c2, i0.ɵɵpureFunction2(6, _c1, ctx_r2.showTransitionOptions, ctx_r2.hideTransitionOptions)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.headerTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contentTemplate)(\"ngIfElse\", content_r6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.footerTemplate);\n  }\n}\nlet PasswordDirective = /*#__PURE__*/(() => {\n  class PasswordDirective {\n    constructor(el, zone) {\n      this.el = el;\n      this.zone = zone;\n      this.promptLabel = 'Enter a password';\n      this.weakLabel = 'Weak';\n      this.mediumLabel = 'Medium';\n      this.strongLabel = 'Strong';\n      this.feedback = true;\n    }\n    set showPassword(show) {\n      this.el.nativeElement.type = show ? 'text' : 'password';\n    }\n    ngDoCheck() {\n      this.updateFilledState();\n    }\n    onInput(e) {\n      this.updateFilledState();\n    }\n    updateFilledState() {\n      this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;\n    }\n    createPanel() {\n      this.panel = document.createElement('div');\n      this.panel.className = 'p-password-panel p-component p-password-panel-overlay p-connected-overlay';\n      this.meter = document.createElement('div');\n      this.meter.className = 'p-password-meter';\n      this.info = document.createElement('div');\n      this.info.className = 'p-password-info';\n      this.info.textContent = this.promptLabel;\n      this.panel.appendChild(this.meter);\n      this.panel.appendChild(this.info);\n      this.panel.style.minWidth = DomHandler.getOuterWidth(this.el.nativeElement) + 'px';\n      document.body.appendChild(this.panel);\n    }\n    showOverlay() {\n      if (this.feedback) {\n        if (!this.panel) {\n          this.createPanel();\n        }\n        this.panel.style.zIndex = String(++DomHandler.zindex);\n        this.panel.style.display = 'block';\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            DomHandler.addClass(this.panel, 'p-connected-overlay-visible');\n            this.bindScrollListener();\n            this.bindDocumentResizeListener();\n          }, 1);\n        });\n        DomHandler.absolutePosition(this.panel, this.el.nativeElement);\n      }\n    }\n    hideOverlay() {\n      if (this.feedback && this.panel) {\n        DomHandler.addClass(this.panel, 'p-connected-overlay-hidden');\n        DomHandler.removeClass(this.panel, 'p-connected-overlay-visible');\n        this.unbindScrollListener();\n        this.unbindDocumentResizeListener();\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.ngOnDestroy();\n          }, 150);\n        });\n      }\n    }\n    onFocus() {\n      this.showOverlay();\n    }\n    onBlur() {\n      this.hideOverlay();\n    }\n    onKeyup(e) {\n      if (this.feedback) {\n        let value = e.target.value,\n          label = null,\n          meterPos = null;\n        if (value.length === 0) {\n          label = this.promptLabel;\n          meterPos = '0px 0px';\n        } else {\n          var score = this.testStrength(value);\n          if (score < 30) {\n            label = this.weakLabel;\n            meterPos = '0px -10px';\n          } else if (score >= 30 && score < 80) {\n            label = this.mediumLabel;\n            meterPos = '0px -20px';\n          } else if (score >= 80) {\n            label = this.strongLabel;\n            meterPos = '0px -30px';\n          }\n        }\n        if (!this.panel || !DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n          this.showOverlay();\n        }\n        this.meter.style.backgroundPosition = meterPos;\n        this.info.textContent = label;\n      }\n    }\n    testStrength(str) {\n      let grade = 0;\n      let val;\n      val = str.match('[0-9]');\n      grade += this.normalize(val ? val.length : 1 / 4, 1) * 25;\n      val = str.match('[a-zA-Z]');\n      grade += this.normalize(val ? val.length : 1 / 2, 3) * 10;\n      val = str.match('[!@#$%^&*?_~.,;=]');\n      grade += this.normalize(val ? val.length : 1 / 6, 1) * 35;\n      val = str.match('[A-Z]');\n      grade += this.normalize(val ? val.length : 1 / 6, 1) * 30;\n      grade *= str.length / 8;\n      return grade > 100 ? 100 : grade;\n    }\n    normalize(x, y) {\n      let diff = x - y;\n      if (diff <= 0) return x / y;else return 1 + 0.5 * (x / (x + y / 4));\n    }\n    get disabled() {\n      return this.el.nativeElement.disabled;\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n          if (DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n            this.hideOverlay();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n    onWindowResize() {\n      this.hideOverlay();\n    }\n    ngOnDestroy() {\n      if (this.panel) {\n        if (this.scrollHandler) {\n          this.scrollHandler.destroy();\n          this.scrollHandler = null;\n        }\n        this.unbindDocumentResizeListener();\n        document.body.removeChild(this.panel);\n        this.panel = null;\n        this.meter = null;\n        this.info = null;\n      }\n    }\n  }\n  PasswordDirective.ɵfac = function PasswordDirective_Factory(t) {\n    return new (t || PasswordDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  PasswordDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PasswordDirective,\n    selectors: [[\"\", \"pPassword\", \"\"]],\n    hostAttrs: [1, \"p-inputtext\", \"p-component\", \"p-element\"],\n    hostVars: 2,\n    hostBindings: function PasswordDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function PasswordDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"focus\", function PasswordDirective_focus_HostBindingHandler() {\n          return ctx.onFocus();\n        })(\"blur\", function PasswordDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"keyup\", function PasswordDirective_keyup_HostBindingHandler($event) {\n          return ctx.onKeyup($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-filled\", ctx.filled);\n      }\n    },\n    inputs: {\n      promptLabel: \"promptLabel\",\n      weakLabel: \"weakLabel\",\n      mediumLabel: \"mediumLabel\",\n      strongLabel: \"strongLabel\",\n      feedback: \"feedback\",\n      showPassword: \"showPassword\"\n    }\n  });\n  return PasswordDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst Password_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Password),\n  multi: true\n};\nlet Password = /*#__PURE__*/(() => {\n  class Password {\n    constructor(cd, config, el, overlayService) {\n      this.cd = cd;\n      this.config = config;\n      this.el = el;\n      this.overlayService = overlayService;\n      this.mediumRegex = '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})';\n      this.strongRegex = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})';\n      this.feedback = true;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.showClear = false;\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.overlayVisible = false;\n      this.focused = false;\n      this.unmasked = false;\n      this.value = null;\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n    ngOnInit() {\n      this.infoText = this.promptText();\n      this.mediumCheckRegExp = new RegExp(this.mediumRegex);\n      this.strongCheckRegExp = new RegExp(this.strongRegex);\n      this.translationSubscription = this.config.translationObserver.subscribe(() => {\n        this.updateUI(this.value || \"\");\n      });\n    }\n    onAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          ZIndexUtils.set('overlay', this.overlay, this.config.zIndex.overlay);\n          this.appendContainer();\n          this.alignOverlay();\n          this.bindScrollListener();\n          this.bindResizeListener();\n          break;\n        case 'void':\n          this.unbindScrollListener();\n          this.unbindResizeListener();\n          this.overlay = null;\n          break;\n      }\n    }\n    onAnimationEnd(event) {\n      switch (event.toState) {\n        case 'void':\n          ZIndexUtils.clear(event.element);\n          break;\n      }\n    }\n    appendContainer() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else document.getElementById(this.appendTo).appendChild(this.overlay);\n      }\n    }\n    alignOverlay() {\n      if (this.appendTo) {\n        this.overlay.style.minWidth = DomHandler.getOuterWidth(this.input.nativeElement) + 'px';\n        DomHandler.absolutePosition(this.overlay, this.input.nativeElement);\n      } else {\n        DomHandler.relativePosition(this.overlay, this.input.nativeElement);\n      }\n    }\n    onInput(event) {\n      this.value = event.target.value;\n      this.onModelChange(this.value);\n      this.onModelTouched();\n    }\n    onInputFocus(event) {\n      this.focused = true;\n      if (this.feedback) {\n        this.overlayVisible = true;\n      }\n      this.onFocus.emit(event);\n    }\n    onInputBlur(event) {\n      this.focused = false;\n      if (this.feedback) {\n        this.overlayVisible = false;\n      }\n      this.onBlur.emit(event);\n    }\n    onKeyDown(event) {\n      if (event.key === 'Escape') {\n        this.overlayVisible = false;\n      }\n    }\n    onKeyUp(event) {\n      if (this.feedback) {\n        let value = event.target.value;\n        this.updateUI(value);\n        if (!this.overlayVisible) {\n          this.overlayVisible = true;\n        }\n      }\n    }\n    updateUI(value) {\n      let label = null;\n      let meter = null;\n      switch (this.testStrength(value)) {\n        case 1:\n          label = this.weakText();\n          meter = {\n            strength: 'weak',\n            width: '33.33%'\n          };\n          break;\n        case 2:\n          label = this.mediumText();\n          meter = {\n            strength: 'medium',\n            width: '66.66%'\n          };\n          break;\n        case 3:\n          label = this.strongText();\n          meter = {\n            strength: 'strong',\n            width: '100%'\n          };\n          break;\n        default:\n          label = this.promptText();\n          meter = null;\n          break;\n      }\n      this.meter = meter;\n      this.infoText = label;\n    }\n    onMaskToggle() {\n      this.unmasked = !this.unmasked;\n    }\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n    }\n    testStrength(str) {\n      let level = 0;\n      if (this.strongCheckRegExp.test(str)) level = 3;else if (this.mediumCheckRegExp.test(str)) level = 2;else if (str.length) level = 1;\n      return level;\n    }\n    writeValue(value) {\n      if (value === undefined) this.value = null;else this.value = value;\n      if (this.feedback) this.updateUI(this.value || \"\");\n      this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.input.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.overlayVisible = false;\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    bindResizeListener() {\n      if (!this.resizeListener) {\n        this.resizeListener = () => {\n          if (this.overlayVisible) {\n            this.overlayVisible = false;\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    }\n    unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    }\n    containerClass() {\n      return {\n        'p-password p-component p-inputwrapper': true,\n        'p-input-icon-right': this.toggleMask\n      };\n    }\n    inputFieldClass() {\n      return {\n        'p-password-input': true,\n        'p-disabled': this.disabled\n      };\n    }\n    toggleIconClass() {\n      return this.unmasked ? 'pi pi-eye-slash' : 'pi pi-eye';\n    }\n    strengthClass() {\n      return `p-password-strength ${this.meter ? this.meter.strength : ''}`;\n    }\n    filled() {\n      return this.value != null && this.value.toString().length > 0;\n    }\n    promptText() {\n      return this.promptLabel || this.getTranslation(TranslationKeys.PASSWORD_PROMPT);\n    }\n    weakText() {\n      return this.weakLabel || this.getTranslation(TranslationKeys.WEAK);\n    }\n    mediumText() {\n      return this.mediumLabel || this.getTranslation(TranslationKeys.MEDIUM);\n    }\n    strongText() {\n      return this.strongLabel || this.getTranslation(TranslationKeys.STRONG);\n    }\n    restoreAppend() {\n      if (this.overlay && this.appendTo) {\n        if (this.appendTo === 'body') document.body.removeChild(this.overlay);else document.getElementById(this.appendTo).removeChild(this.overlay);\n      }\n    }\n    inputType() {\n      return this.unmasked ? 'text' : 'password';\n    }\n    getTranslation(option) {\n      return this.config.getTranslation(option);\n    }\n    clear() {\n      this.value = null;\n      this.onModelChange(this.value);\n      this.writeValue(this.value);\n      this.onClear.emit();\n    }\n    ngOnDestroy() {\n      if (this.overlay) {\n        ZIndexUtils.clear(this.overlay);\n        this.overlay = null;\n      }\n      this.restoreAppend();\n      this.unbindResizeListener();\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n      if (this.translationSubscription) {\n        this.translationSubscription.unsubscribe();\n      }\n    }\n  }\n  Password.ɵfac = function Password_Factory(t) {\n    return new (t || Password)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.OverlayService));\n  };\n  Password.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Password,\n    selectors: [[\"p-password\"]],\n    contentQueries: function Password_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Password_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n    hostVars: 8,\n    hostBindings: function Password_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled())(\"p-inputwrapper-focus\", ctx.focused)(\"p-password-clearable\", ctx.showClear)(\"p-password-mask\", ctx.toggleMask);\n      }\n    },\n    inputs: {\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      label: \"label\",\n      disabled: \"disabled\",\n      promptLabel: \"promptLabel\",\n      mediumRegex: \"mediumRegex\",\n      strongRegex: \"strongRegex\",\n      weakLabel: \"weakLabel\",\n      mediumLabel: \"mediumLabel\",\n      strongLabel: \"strongLabel\",\n      inputId: \"inputId\",\n      feedback: \"feedback\",\n      appendTo: \"appendTo\",\n      toggleMask: \"toggleMask\",\n      inputStyleClass: \"inputStyleClass\",\n      styleClass: \"styleClass\",\n      style: \"style\",\n      inputStyle: \"inputStyle\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      placeholder: \"placeholder\",\n      showClear: \"showClear\"\n    },\n    outputs: {\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onClear: \"onClear\"\n    },\n    features: [i0.ɵɵProvidersFeature([Password_VALUE_ACCESSOR])],\n    decls: 6,\n    vars: 18,\n    consts: [[\"input\", \"\"], [\"overlay\", \"\"], [\"content\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"pInputText\", \"\", 3, \"input\", \"focus\", \"blur\", \"keyup\", \"keydown\", \"ngClass\", \"ngStyle\", \"value\"], [\"class\", \"p-password-clear-icon pi pi-times\", 3, \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"click\", 4, \"ngIf\"], [1, \"p-password-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"], [3, \"click\", \"ngClass\"], [4, \"ngTemplateOutlet\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"p-password-meter\"], [\"className\", \"p-password-info\"]],\n    template: function Password_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 3)(1, \"input\", 4, 0);\n        i0.ɵɵlistener(\"input\", function Password_Template_input_input_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInput($event));\n        })(\"focus\", function Password_Template_input_focus_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputFocus($event));\n        })(\"blur\", function Password_Template_input_blur_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputBlur($event));\n        })(\"keyup\", function Password_Template_input_keyup_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onKeyUp($event));\n        })(\"keydown\", function Password_Template_input_keydown_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onKeyDown($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, Password_i_3_Template, 1, 0, \"i\", 5)(4, Password_i_4_Template, 1, 1, \"i\", 6)(5, Password_div_5_Template, 7, 11, \"div\", 6);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance();\n        i0.ɵɵclassMap(ctx.inputStyleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.inputFieldClass())(\"ngStyle\", ctx.inputStyle)(\"value\", ctx.value);\n        i0.ɵɵattribute(\"label\", ctx.label)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledBy\", ctx.ariaLabelledBy)(\"id\", ctx.inputId)(\"type\", ctx.inputType())(\"placeholder\", ctx.placeholder);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showClear && ctx.value != null);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.toggleMask);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgStyle, i3.InputText, i2.NgIf, i2.NgTemplateOutlet],\n    styles: [\".p-password{position:relative;display:inline-flex}.p-password-panel{position:absolute;top:0;left:0}.p-password .p-password-panel{min-width:100%}.p-password-meter{height:10px}.p-password-strength{height:100%;width:0%;transition:width 1s ease-in-out}.p-fluid .p-password{display:flex}.p-password-clear-icon{position:absolute;top:50%;margin-top:-.5rem;cursor:pointer}.p-password-clearable{position:relative}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return Password;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PasswordModule = /*#__PURE__*/(() => {\n  class PasswordModule {}\n  PasswordModule.ɵfac = function PasswordModule_Factory(t) {\n    return new (t || PasswordModule)();\n  };\n  PasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PasswordModule\n  });\n  PasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, InputTextModule], SharedModule]\n  });\n  return PasswordModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Password, PasswordDirective, PasswordModule, Password_VALUE_ACCESSOR };\n//# sourceMappingURL=primeng-password.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}