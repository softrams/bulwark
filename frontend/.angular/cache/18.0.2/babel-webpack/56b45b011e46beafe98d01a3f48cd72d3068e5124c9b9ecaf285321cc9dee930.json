{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/Ryan.Mathus/repos/bulwark/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppService = void 0;\nconst environment_1 = require(\"../environments/environment\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/common/http\");\nconst i2 = require(\"@angular/platform-browser\");\nlet AppService = /*#__PURE__*/(() => {\n  class AppService {\n    constructor(http, sanitizer) {\n      this.http = http;\n      this.sanitizer = sanitizer;\n      this.api = environment_1.environment.apiUrl;\n    }\n    /**\n     * Function is responsible for initial retrevial of organizations on dashboard loading\n     * @returns all organization information to the dashboard\n     */\n    getOrganizations() {\n      return this.http.get(`${this.api}/organization`).toPromise().then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (res) {\n          return res;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * Function responsible for retreval of organizations archived status.\n     * @returns Data for organizations that have been archived.\n     */\n    getArchivedOrganizations() {\n      const httpOptions = {\n        responseType: 'blob'\n      };\n      return this.http.get(`${this.api}/organization/archive`).toPromise().then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (res) {\n          return res;\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * Function is responsible for retreval of images as blogs using the ID association\n     * @param file accepts the id assigned to a file\n     * @returns the image associated with the id\n     */\n    getImageById(file) {\n      const httpOptions = {\n        responseType: 'blob'\n      };\n      return this.http.get(`${this.api}/file/${file.id}`, httpOptions).toPromise().then(res => {\n        return this.createObjectUrl(res, file.mimetype);\n      });\n    }\n    /**\n     * Function is responsible for retreving an organization based on ID passed\n     * @param id is the ID of the organization being requested\n     * @returns all information related to the organization requested\n     */\n    getOrganizationById(id) {\n      return this.http.get(`${this.api}/organization/${id}`).toPromise().then(res => {\n        return res;\n      });\n    }\n    /**\n     * Function returns all active assets related to the organization ID\n     * @param id is the ID of the organization\n     * @returns all assets related to the organization passed\n     */\n    getOrganizationAssets(id) {\n      return this.http.get(`${this.api}/organization/asset/${id}`).toPromise().then(res => {\n        return res;\n      });\n    }\n    /**\n     * Function returns all open vulnerabilities by Asset ID\n     * @param assetId\n     * @returns open asset vulnerabilities\n     */\n    getOpenVulnsByAssetId(assetId) {\n      return this.http.get(`${this.api}/asset/${assetId}/open/vulnerabilities`);\n    }\n    /**\n     * Function returns all archived assets related to the organization ID\n     * @param id is the ID of the organization\n     * @returns all assets related to the organization passed\n     */\n    getOrganizationArchiveAssets(id) {\n      return this.http.get(`${this.api}/organization/${id}/asset/archive`);\n    }\n    /**\n     * Function is responsible for archiving an organization by altering it's status\n     * @param id is the organization being passed for archiving\n     * @returns updates the status of the organization and reports the http status returned\n     */\n    archiveOrganization(id) {\n      return this.http.patch(`${this.api}/organization/${id}/archive`, null);\n    }\n    /**\n     * Function is responsible for unarchving an organization by alterint it's status\n     * @param id is the organization being passed for archiving\n     * @returns updates the status of the organization and reports the http status returned\n     */\n    activateOrganization(id) {\n      return this.http.patch(`${this.api}/organization/${id}/activate`, null);\n    }\n    /**\n     * Function is responsible for returning all assessements related to an organization\n     * @param id is the organization ID associated with the assessements\n     * @returns all assessments related to the organization\n     */\n    getAssessments(id) {\n      return this.http.get(`${this.api}/assessment/${id}`).toPromise().then(res => {\n        return res;\n      });\n    }\n    /**\n     * Delete assessment by ID\n     * @returns success/error message\n     */\n    deleteAssessment(assessmentId) {\n      return this.http.delete(`${this.api}/assessment/${assessmentId}`);\n    }\n    /**\n     * Function is responsible for returning all vulnerabilites related to an assessment\n     * @param assessmentId is the ID associated with the assessment\n     * @returns all vulnerablities related to the assessment\n     */\n    getVulnerabilities(assessmentId) {\n      return this.http.get(`${this.api}/assessment/${assessmentId}/vulnerability`);\n    }\n    /**\n     * Function is responsible for returning a vulnerablity called by it's ID\n     * @param id associated to the vulnerability requested\n     * @returns all object related data to the vulnerability requested\n     */\n    getVulnerability(id) {\n      return this.http.get(`${this.api}/vulnerability/${id}`);\n    }\n    exportVulnToJira(vulnId) {\n      return this.http.get(`${this.api}/vulnerability/jira/${vulnId}`);\n    }\n    exportAssessmentToJira(assessmentId) {\n      return this.http.get(`${this.api}/assessment/jira/${assessmentId}`);\n    }\n    getConfig() {\n      return this.http.get(`${this.api}/config`);\n    }\n    updateConfig(config) {\n      return this.http.post(`${this.api}/config`, config);\n    }\n    /**\n     * Function is responsible for updating a vulnerability by ID\n     * @param id is associated with the requested vulnerability\n     * @param vuln is associated with the form data passed as an object\n     * @returns http status code for the return value\n     */\n    updateVulnerability(id, vuln) {\n      return this.http.patch(`${this.api}/vulnerability/${id}`, vuln);\n    }\n    /**\n     * Function is responsible for creating a vulnerability for an assessment\n     * @param vuln contains the form object data for all required fields\n     * @returns http status code of the request\n     */\n    createVuln(vuln) {\n      return this.http.post(`${this.api}/vulnerability`, vuln);\n    }\n    /**\n     * Function is responsible for deletion of a vulnerability\n     * @param vulnId is the ID association to the vulnerability\n     * @returns http status code of the request\n     */\n    deleteVuln(vulnId) {\n      return this.http.delete(`${this.api}/vulnerability/${vulnId}`);\n    }\n    /**\n     * Function is responsible for creating a new organization\n     * @param org object of the form data passed to the API\n     * @returns http status code of the request\n     */\n    createOrg(org) {\n      return this.http.post(`${this.api}/organization`, org);\n    }\n    /**\n     * Function is responsible for updating an organization\n     * @param id is the organization ID being updated\n     * @param org is the form object data passed to the API\n     * @returns http status code of the request\n     */\n    updateOrg(id, org) {\n      return this.http.patch(`${this.api}/organization/${id}`, org);\n    }\n    /**\n     * Function is responsible for creating a new asset tied to an organization\n     * @param asset is the form object data for the new asset\n     * @returns http status code of the request\n     */\n    createAsset(asset) {\n      return this.http.post(`${this.api}/organization/${asset.organization}/asset`, asset);\n    }\n    purgeJira(assetId) {\n      return this.http.delete(`${this.api}/asset/jira/${assetId}`);\n    }\n    /**\n     * Function is responsible for fetching assets\n     * @param assetId asset ID being requested\n     * @param orgId associated organization ID attached to the asset\n     * @returns https status code of the request\n     */\n    getAsset(assetId, orgId) {\n      return this.http.get(`${this.api}/organization/${orgId}/asset/${assetId}`);\n    }\n    /**\n     * Function is responsible for updating an asset\n     * @param asset is the ID associated to the asset\n     * @returns http status code of the request\n     */\n    updateAsset(asset) {\n      return this.http.patch(`${this.api}/organization/${asset.organization}/asset/${asset.id}`, asset);\n    }\n    /**\n     * Function is responsible for archiving an asset\n     * @param asset is the ID associated to the asset\n     * @returns http status code of the request\n     */\n    archiveAsset(asset) {\n      return this.http.patch(`${this.api}/asset/archive/${asset.id}`, {});\n    }\n    /**\n     * Function is responsible for activating an asset\n     * @param asset is the ID associated to the asset\n     * @returns http status code of the request\n     */\n    activateAsset(asset) {\n      return this.http.patch(`${this.api}/asset/activate/${asset.id}`, {});\n    }\n    /**\n     * Function is responsible for creating new assessments\n     * @param assessment data contained in the assessment form object\n     * @returns http status code of the request\n     */\n    createAssessment(assessment) {\n      return this.http.post(`${this.api}/assessment`, assessment);\n    }\n    /**\n     * Function is responsible for updating an assessment's data\n     * @param assessment form object data of the assessment\n     * @param assessmentId associated ID of the assessment being altered\n     * @param assetId asset ID attached to the request ties into the assessment ID\n     * @returns http status code of the request\n     */\n    updateAssessment(assessment, assessmentId, assetId) {\n      return this.http.patch(`${this.api}/asset/${assetId}/assessment/${assessmentId}`, assessment);\n    }\n    /**\n     * Function is responsible for retrevial of assessments\n     * @param assetId associated asset ID required\n     * @param assessmentId associated assessment ID required\n     * @returns http status code with object data from the API call\n     */\n    getAssessment(assetId, assessmentId) {\n      return this.http.get(`${this.api}/asset/${assetId}/assessment/${assessmentId}`);\n    }\n    /**\n     * Function is responsible for uploading files, attaching them to the resource requesting it\n     * @param fileToUpload form object data for the files associated in the request\n     * @returns http status code of the request\n     */\n    upload(fileToUpload) {\n      const formData = new FormData();\n      formData.append('file', fileToUpload);\n      return this.http.post(`${this.api}/upload`, formData);\n    }\n    /**\n     * Function is responsible for uploading multi-part data associated with files.\n     * @param fileToUpload form object data holding the file objects required\n     * @returns http status code of the request\n     */\n    uploadMultiple(fileToUpload) {\n      return this.http.post(`${this.api}/upload-multiple`, fileToUpload);\n    }\n    /**\n     * Function is responsible for report retrevial\n     * @param assessmentId required ID of the assessment for object data relations\n     * @returns http status request and object data for the report\n     */\n    getReport(assessmentId) {\n      return this.http.get(`${this.api}/assessment/${assessmentId}/report`);\n    }\n    /**\n     * Function is responsible for report generation\n     * @param orgId requires associated data from the organization ID\n     * @param assetId requires associated data from the asset ID\n     * @param assessmentId requires associated data from the assessment ID\n     * @returns http status code of the request along with a new tab with a generated report\n     */\n    generateReport(orgId, assetId, assessmentId) {\n      const httpOptions = {\n        responseType: 'blob'\n      };\n      const generateObject = {\n        orgId,\n        assetId,\n        assessmentId\n      };\n      return this.http.post(`${this.api}/report/generate`, generateObject, httpOptions);\n    }\n    /**\n     * Function is responsible for generating URL's to provide accessable data, reports, images, and\n     * any other downloadble content.\n     * @param file requires the file object to be called\n     * @param [mimetype] requires the mimetype of the data\n     * @returns new URL with the object requested in a sanatized manner\n     */\n    createObjectUrl(file, mimetype) {\n      // Preview unsaved form\n      const blob = new Blob([file], {\n        type: mimetype || file.type\n      });\n      const url = window.URL.createObjectURL(blob);\n      return this.sanitizer.bypassSecurityTrustUrl(url);\n    }\n    static #_ = this.ɵfac = function AppService_Factory(t) {\n      return new (t || AppService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppService,\n      factory: AppService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AppService;\n})();\nexports.AppService = AppService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}