{"ast":null,"code":"import * as i4 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, Input, Output, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { UniqueComponentId, ObjectUtils, ZIndexUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i5 from 'primeng/tooltip';\nimport { TooltipModule } from 'primeng/tooltip';\nimport * as i1 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nconst _c0 = a0 => ({\n  \"height\": a0\n});\nconst _c1 = (a0, a1) => ({\n  \"p-dropdown-item\": true,\n  \"p-highlight\": a0,\n  \"p-disabled\": a1\n});\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction DropdownItem_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.label || \"empty\");\n  }\n}\nfunction DropdownItem_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c3 = [\"container\"];\nconst _c4 = [\"filter\"];\nconst _c5 = [\"in\"];\nconst _c6 = [\"editableInput\"];\nconst _c7 = (a0, a1, a2, a3) => ({\n  \"p-dropdown p-component\": true,\n  \"p-disabled\": a0,\n  \"p-dropdown-open\": a1,\n  \"p-focus\": a2,\n  \"p-dropdown-clearable\": a3\n});\nconst _c8 = a0 => ({\n  \"p-dropdown-label p-inputtext\": true,\n  \"p-dropdown-label-empty\": a0\n});\nconst _c9 = a0 => ({\n  \"p-dropdown-label p-inputtext p-placeholder\": true,\n  \"p-dropdown-label-empty\": a0\n});\nconst _c10 = (a0, a1) => ({\n  showTransitionParams: a0,\n  hideTransitionParams: a1\n});\nconst _c11 = a0 => ({\n  value: \"visible\",\n  params: a0\n});\nconst _c12 = a0 => ({\n  \"p-dropdown-virtualscroll\": a0\n});\nconst _c13 = (a0, a1) => ({\n  $implicit: a0,\n  selectedOption: a1\n});\nfunction Dropdown_span_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.label || \"empty\");\n  }\n}\nfunction Dropdown_span_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtemplate(1, Dropdown_span_5_ng_container_1_Template, 2, 1, \"ng-container\", 20)(2, Dropdown_span_5_ng_container_2_Template, 1, 0, \"ng-container\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c8, ctx_r1.label == null || ctx_r1.label.length === 0))(\"pTooltip\", ctx_r1.tooltip)(\"tooltipPosition\", ctx_r1.tooltipPosition)(\"positionStyle\", ctx_r1.tooltipPositionStyle)(\"tooltipStyleClass\", ctx_r1.tooltipStyleClass);\n    i0.ɵɵattribute(\"id\", ctx_r1.labelId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.selectedItemTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.selectedItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c2, ctx_r1.selectedOption));\n  }\n}\nfunction Dropdown_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c9, ctx_r1.placeholder == null || ctx_r1.placeholder.length === 0));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.placeholder || \"empty\");\n  }\n}\nfunction Dropdown_input_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 23, 2);\n    i0.ɵɵlistener(\"click\", function Dropdown_input_7_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onEditableInputClick());\n    })(\"input\", function Dropdown_input_7_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onEditableInputChange($event));\n    })(\"focus\", function Dropdown_input_7_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onEditableInputFocus($event));\n    })(\"blur\", function Dropdown_input_7_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onInputBlur($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵattribute(\"maxlength\", ctx_r1.maxlength)(\"placeholder\", ctx_r1.placeholder)(\"aria-expanded\", ctx_r1.overlayVisible);\n  }\n}\nfunction Dropdown_i_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 24);\n    i0.ɵɵlistener(\"click\", function Dropdown_i_8_Template_i_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clear($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Dropdown_div_11_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32);\n    i0.ɵɵlistener(\"click\", function Dropdown_div_11_div_2_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵelementStart(2, \"input\", 33, 4);\n    i0.ɵɵlistener(\"keydown.enter\", function Dropdown_div_11_div_2_Template_input_keydown_enter_2_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      return i0.ɵɵresetView($event.preventDefault());\n    })(\"keydown\", function Dropdown_div_11_div_2_Template_input_keydown_2_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onKeydown($event, false));\n    })(\"input\", function Dropdown_div_11_div_2_Template_input_input_2_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onFilterInputChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\", 34);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r1.filterValue || \"\");\n    i0.ɵɵattribute(\"placeholder\", ctx_r1.filterPlaceholder)(\"aria-label\", ctx_r1.ariaFilterLabel)(\"aria-activedescendant\", ctx_r1.overlayVisible ? \"p-highlighted-option\" : ctx_r1.labelId);\n  }\n}\nfunction Dropdown_div_11_ng_container_5_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const optgroup_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.getOptionGroupLabel(optgroup_r7) || \"empty\");\n  }\n}\nfunction Dropdown_div_11_ng_container_5_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_div_11_ng_container_5_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_div_11_ng_container_5_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 36);\n    i0.ɵɵtemplate(1, Dropdown_div_11_ng_container_5_ng_template_1_span_1_Template, 2, 1, \"span\", 20)(2, Dropdown_div_11_ng_container_5_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, Dropdown_div_11_ng_container_5_ng_template_1_ng_container_3_Template, 1, 0, \"ng-container\", 21);\n  }\n  if (rf & 2) {\n    const optgroup_r7 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const itemslist_r8 = i0.ɵɵreference(8);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.groupTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.groupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c2, optgroup_r7));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", itemslist_r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(7, _c13, ctx_r1.getOptionGroupChildren(optgroup_r7), ctx_r1.selectedOption));\n  }\n}\nfunction Dropdown_div_11_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dropdown_div_11_ng_container_5_ng_template_1_Template, 4, 10, \"ng-template\", 35);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.optionsToDisplay);\n  }\n}\nfunction Dropdown_div_11_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_div_11_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dropdown_div_11_ng_container_6_ng_container_1_Template, 1, 0, \"ng-container\", 21);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const itemslist_r8 = i0.ɵɵreference(8);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", itemslist_r8)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c13, ctx_r1.optionsToDisplay, ctx_r1.selectedOption));\n  }\n}\nfunction Dropdown_div_11_ng_template_7_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdownItem\", 38);\n    i0.ɵɵlistener(\"onClick\", function Dropdown_div_11_ng_template_7_ng_container_0_ng_template_1_Template_p_dropdownItem_onClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.onItemClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r10 = ctx.$implicit;\n    const selectedOption_r11 = i0.ɵɵnextContext(2).selectedOption;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"option\", option_r10)(\"selected\", selectedOption_r11 == option_r10)(\"label\", ctx_r1.getOptionLabel(option_r10))(\"disabled\", ctx_r1.isOptionDisabled(option_r10))(\"template\", ctx_r1.itemTemplate);\n  }\n}\nfunction Dropdown_div_11_ng_template_7_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dropdown_div_11_ng_template_7_ng_container_0_ng_template_1_Template, 1, 5, \"ng-template\", 35);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const options_r12 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", options_r12);\n  }\n}\nfunction Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p-dropdownItem\", 38);\n    i0.ɵɵlistener(\"onClick\", function Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template_p_dropdownItem_onClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r1 = i0.ɵɵnextContext(5);\n      return i0.ɵɵresetView(ctx_r1.onItemClick($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const option_r15 = ctx.$implicit;\n    const selectedOption_r11 = i0.ɵɵnextContext(3).selectedOption;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"option\", option_r15)(\"selected\", selectedOption_r11 == option_r15)(\"label\", ctx_r1.getOptionLabel(option_r15))(\"disabled\", ctx_r1.isOptionDisabled(option_r15))(\"template\", ctx_r1.itemTemplate);\n  }\n}\nfunction Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 40, 6);\n    i0.ɵɵlistener(\"scrolledIndexChange\", function Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.scrollToSelectedVirtualScrollElement());\n    });\n    i0.ɵɵtemplate(2, Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template, 2, 5, \"ng-container\", 41);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const options_r12 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r1.scrollHeight))(\"itemSize\", ctx_r1.itemSize);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", options_r12);\n  }\n}\nfunction Dropdown_div_11_ng_template_7_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dropdown_div_11_ng_template_7_ng_template_1_cdk_virtual_scroll_viewport_0_Template, 3, 5, \"cdk-virtual-scroll-viewport\", 39);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.virtualScroll && ctx_r1.optionsToDisplay && ctx_r1.optionsToDisplay.length);\n  }\n}\nfunction Dropdown_div_11_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dropdown_div_11_ng_template_7_ng_container_0_Template, 2, 1, \"ng-container\", 37)(1, Dropdown_div_11_ng_template_7_ng_template_1_Template, 1, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n  }\n  if (rf & 2) {\n    const virtualScrollList_r16 = i0.ɵɵreference(2);\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.virtualScroll)(\"ngIfElse\", virtualScrollList_r16);\n  }\n}\nfunction Dropdown_div_11_li_9_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.emptyFilterMessageLabel, \" \");\n  }\n}\nfunction Dropdown_div_11_li_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 7);\n  }\n}\nfunction Dropdown_div_11_li_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 42);\n    i0.ɵɵtemplate(1, Dropdown_div_11_li_9_ng_container_1_Template, 2, 1, \"ng-container\", 37)(2, Dropdown_div_11_li_9_ng_container_2_Template, 2, 0, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.emptyFilterTemplate && !ctx_r1.emptyTemplate)(\"ngIfElse\", ctx_r1.emptyFilter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.emptyFilterTemplate || ctx_r1.emptyTemplate);\n  }\n}\nfunction Dropdown_div_11_li_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.emptyMessageLabel, \" \");\n  }\n}\nfunction Dropdown_div_11_li_10_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 8);\n  }\n}\nfunction Dropdown_div_11_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 42);\n    i0.ɵɵtemplate(1, Dropdown_div_11_li_10_ng_container_1_Template, 2, 1, \"ng-container\", 37)(2, Dropdown_div_11_li_10_ng_container_2_Template, 2, 0, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.emptyTemplate)(\"ngIfElse\", ctx_r1.empty);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.emptyTemplate);\n  }\n}\nfunction Dropdown_div_11_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Dropdown_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"click\", function Dropdown_div_11_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayClick($event));\n    })(\"@overlayAnimation.start\", function Dropdown_div_11_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayAnimationStart($event));\n    })(\"@overlayAnimation.start\", function Dropdown_div_11_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayAnimationEnd($event));\n    });\n    i0.ɵɵtemplate(1, Dropdown_div_11_ng_container_1_Template, 1, 0, \"ng-container\", 26)(2, Dropdown_div_11_div_2_Template, 5, 4, \"div\", 27);\n    i0.ɵɵelementStart(3, \"div\", 28)(4, \"ul\", 29);\n    i0.ɵɵtemplate(5, Dropdown_div_11_ng_container_5_Template, 2, 1, \"ng-container\", 20)(6, Dropdown_div_11_ng_container_6_Template, 2, 5, \"ng-container\", 20)(7, Dropdown_div_11_ng_template_7_Template, 3, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor)(9, Dropdown_div_11_li_9_Template, 3, 3, \"li\", 30)(10, Dropdown_div_11_li_10_Template, 3, 3, \"li\", 30);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(11, Dropdown_div_11_ng_container_11_Template, 1, 0, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.panelStyleClass);\n    i0.ɵɵproperty(\"ngClass\", \"p-dropdown-panel p-component\")(\"@overlayAnimation\", i0.ɵɵpureFunction1(19, _c11, i0.ɵɵpureFunction2(16, _c10, ctx_r1.showTransitionOptions, ctx_r1.hideTransitionOptions)))(\"ngStyle\", ctx_r1.panelStyle);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.headerTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.filter);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"max-height\", ctx_r1.virtualScroll ? \"auto\" : ctx_r1.scrollHeight || \"auto\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(21, _c12, ctx_r1.virtualScroll));\n    i0.ɵɵattribute(\"id\", ctx_r1.listId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.group);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.group);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.filterValue && ctx_r1.isEmpty());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.filterValue && ctx_r1.isEmpty());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.footerTemplate);\n  }\n}\nconst DROPDOWN_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Dropdown),\n  multi: true\n};\nlet DropdownItem = /*#__PURE__*/(() => {\n  class DropdownItem {\n    constructor() {\n      this.onClick = new EventEmitter();\n    }\n    onOptionClick(event) {\n      this.onClick.emit({\n        originalEvent: event,\n        option: this.option\n      });\n    }\n  }\n  DropdownItem.ɵfac = function DropdownItem_Factory(t) {\n    return new (t || DropdownItem)();\n  };\n  DropdownItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DropdownItem,\n    selectors: [[\"p-dropdownItem\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      option: \"option\",\n      selected: \"selected\",\n      label: \"label\",\n      disabled: \"disabled\",\n      visible: \"visible\",\n      itemSize: \"itemSize\",\n      template: \"template\"\n    },\n    outputs: {\n      onClick: \"onClick\"\n    },\n    decls: 3,\n    vars: 15,\n    consts: [[\"role\", \"option\", \"pRipple\", \"\", 3, \"click\", \"ngStyle\", \"id\", \"ngClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function DropdownItem_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"li\", 0);\n        i0.ɵɵlistener(\"click\", function DropdownItem_Template_li_click_0_listener($event) {\n          return ctx.onOptionClick($event);\n        });\n        i0.ɵɵtemplate(1, DropdownItem_span_1_Template, 2, 1, \"span\", 1)(2, DropdownItem_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(8, _c0, ctx.itemSize + \"px\"))(\"id\", ctx.selected ? \"p-highlighted-option\" : \"\")(\"ngClass\", i0.ɵɵpureFunction2(10, _c1, ctx.selected, ctx.disabled));\n        i0.ɵɵattribute(\"aria-label\", ctx.label)(\"aria-selected\", ctx.selected);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.template);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c2, ctx.option));\n      }\n    },\n    dependencies: [i1.Ripple, i2.NgStyle, i2.NgClass, i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return DropdownItem;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet Dropdown = /*#__PURE__*/(() => {\n  class Dropdown {\n    constructor(el, renderer, cd, zone, filterService, config, overlayService) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.zone = zone;\n      this.filterService = filterService;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.scrollHeight = '200px';\n      this.resetFilterOnHide = false;\n      this.dropdownIcon = 'pi pi-chevron-down';\n      this.optionGroupChildren = \"items\";\n      this.autoDisplayFirst = true;\n      this.emptyFilterMessage = '';\n      this.emptyMessage = '';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.filterMatchMode = \"contains\";\n      this.tooltip = '';\n      this.tooltipPosition = 'right';\n      this.tooltipPositionStyle = 'absolute';\n      this.autofocusFilter = true;\n      this.onChange = new EventEmitter();\n      this.onFilter = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n      this.viewPortOffsetTop = 0;\n      this.id = UniqueComponentId();\n    }\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(_disabled) {\n      if (_disabled) {\n        this.focused = false;\n        if (this.overlayVisible) this.hide();\n      }\n      this._disabled = _disabled;\n      if (!this.cd.destroyed) {\n        this.cd.detectChanges();\n      }\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n          case 'selectedItem':\n            this.selectedItemTemplate = item.template;\n            break;\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n          case 'emptyfilter':\n            this.emptyFilterTemplate = item.template;\n            break;\n          case 'empty':\n            this.emptyTemplate = item.template;\n            break;\n          case 'group':\n            this.groupTemplate = item.template;\n            break;\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n    ngOnInit() {\n      this.optionsToDisplay = this.options;\n      this.updateSelectedOption(null);\n      this.labelId = this.id + '_label';\n      this.listId = this.id + '_list';\n    }\n    get options() {\n      return this._options;\n    }\n    set options(val) {\n      this._options = val;\n      this.optionsToDisplay = this._options;\n      this.updateSelectedOption(this.value);\n      this.selectedOption = this.findOption(this.value, this.optionsToDisplay);\n      if (!this.selectedOption) {\n        this.value = null;\n        this.onModelChange(this.value);\n      }\n      this.optionsChanged = true;\n      if (this._filterValue && this._filterValue.length) {\n        this.activateFilter();\n      }\n    }\n    get filterValue() {\n      return this._filterValue;\n    }\n    set filterValue(val) {\n      this._filterValue = val;\n      this.activateFilter();\n    }\n    ngAfterViewInit() {\n      if (this.editable) {\n        this.updateEditableLabel();\n      }\n    }\n    get label() {\n      return this.selectedOption ? this.getOptionLabel(this.selectedOption) : null;\n    }\n    get emptyMessageLabel() {\n      return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    get emptyFilterMessageLabel() {\n      return this.emptyFilterMessage || this.config.getTranslation(TranslationKeys.EMPTY_FILTER_MESSAGE);\n    }\n    get filled() {\n      return this.value || this.value != null || this.value != undefined;\n    }\n    updateEditableLabel() {\n      if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n        this.editableInputViewChild.nativeElement.value = this.selectedOption ? this.getOptionLabel(this.selectedOption) : this.value || '';\n      }\n    }\n    getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option.label != undefined ? option.label : option;\n    }\n    getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : this.optionLabel || option.value === undefined ? option : option.value;\n    }\n    isOptionDisabled(option) {\n      return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : option.disabled !== undefined ? option.disabled : false;\n    }\n    getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup.label != undefined ? optionGroup.label : optionGroup;\n    }\n    getOptionGroupChildren(optionGroup) {\n      return this.optionGroupChildren ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;\n    }\n    onItemClick(event) {\n      const option = event.option;\n      if (!this.isOptionDisabled(option)) {\n        this.selectItem(event.originalEvent, option);\n        this.accessibleViewChild.nativeElement.focus();\n      }\n      setTimeout(() => {\n        this.hide();\n      }, 150);\n    }\n    selectItem(event, option) {\n      if (this.selectedOption != option) {\n        this.selectedOption = option;\n        this.value = this.getOptionValue(option);\n        this.onModelChange(this.value);\n        this.updateEditableLabel();\n        this.onChange.emit({\n          originalEvent: event,\n          value: this.value\n        });\n        if (this.virtualScroll) {\n          setTimeout(() => {\n            this.viewPortOffsetTop = this.viewPort ? this.viewPort.measureScrollOffset() : 0;\n          }, 1);\n        }\n      }\n    }\n    ngAfterViewChecked() {\n      if (this.optionsChanged && this.overlayVisible) {\n        this.optionsChanged = false;\n        if (this.virtualScroll) {\n          this.updateVirtualScrollSelectedIndex(true);\n        }\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.alignOverlay();\n          }, 1);\n        });\n      }\n      if (this.selectedOptionUpdated && this.itemsWrapper) {\n        if (this.virtualScroll && this.viewPort) {\n          let range = this.viewPort.getRenderedRange();\n          this.updateVirtualScrollSelectedIndex(false);\n          if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n            this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n          }\n        }\n        let selectedItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n        if (selectedItem) {\n          DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.p-highlight'));\n        }\n        this.selectedOptionUpdated = false;\n      }\n    }\n    writeValue(value) {\n      if (this.filter) {\n        this.resetFilter();\n      }\n      this.value = value;\n      this.updateSelectedOption(value);\n      this.updateEditableLabel();\n      this.cd.markForCheck();\n    }\n    resetFilter() {\n      this._filterValue = null;\n      if (this.filterViewChild && this.filterViewChild.nativeElement) {\n        this.filterViewChild.nativeElement.value = '';\n      }\n      this.optionsToDisplay = this.options;\n    }\n    updateSelectedOption(val) {\n      this.selectedOption = this.findOption(val, this.optionsToDisplay);\n      if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n        if (this.group) {\n          this.selectedOption = this.optionsToDisplay[0].items[0];\n        } else {\n          this.selectedOption = this.optionsToDisplay[0];\n        }\n        this.value = this.getOptionValue(this.selectedOption);\n        this.onModelChange(this.value);\n      }\n      this.selectedOptionUpdated = true;\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    onMouseclick(event) {\n      if (this.disabled || this.readonly || this.isInputClick(event)) {\n        return;\n      }\n      this.onClick.emit(event);\n      this.accessibleViewChild.nativeElement.focus();\n      if (this.overlayVisible) this.hide();else this.show();\n      this.cd.detectChanges();\n    }\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n    }\n    isInputClick(event) {\n      return DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || event.target.isSameNode(this.accessibleViewChild.nativeElement) || this.editableInputViewChild && event.target.isSameNode(this.editableInputViewChild.nativeElement);\n    }\n    isOutsideClicked(event) {\n      return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    }\n    isEmpty() {\n      return !this.optionsToDisplay || this.optionsToDisplay && this.optionsToDisplay.length === 0;\n    }\n    onEditableInputClick() {\n      this.bindDocumentClickListener();\n    }\n    onEditableInputFocus(event) {\n      this.focused = true;\n      this.hide();\n      this.onFocus.emit(event);\n    }\n    onEditableInputChange(event) {\n      this.value = event.target.value;\n      this.updateSelectedOption(this.value);\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n    show() {\n      this.overlayVisible = true;\n      this.cd.markForCheck();\n    }\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          let itemsWrapperSelector = this.virtualScroll ? '.cdk-virtual-scroll-viewport' : '.p-dropdown-items-wrapper';\n          this.itemsWrapper = DomHandler.findSingle(this.overlay, itemsWrapperSelector);\n          this.appendOverlay();\n          if (this.autoZIndex) {\n            ZIndexUtils.set('overlay', this.overlay, this.baseZIndex + this.config.zIndex.overlay);\n          }\n          this.alignOverlay();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n          this.bindScrollListener();\n          if (this.options && this.options.length) {\n            if (!this.virtualScroll) {\n              let selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.p-dropdown-item.p-highlight');\n              if (selectedListItem) {\n                selectedListItem.scrollIntoView({\n                  block: 'nearest',\n                  inline: 'center'\n                });\n              }\n            }\n          }\n          if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.preventModelTouched = true;\n            if (this.autofocusFilter) {\n              this.filterViewChild.nativeElement.focus();\n            }\n          }\n          this.onShow.emit(event);\n          break;\n        case 'void':\n          this.onOverlayHide();\n          this.onHide.emit(event);\n          break;\n      }\n    }\n    onOverlayAnimationEnd(event) {\n      switch (event.toState) {\n        case 'void':\n          ZIndexUtils.clear(event.element);\n          break;\n      }\n    }\n    scrollToSelectedVirtualScrollElement() {\n      if (!this.virtualAutoScrolled) {\n        if (this.viewPortOffsetTop) {\n          this.viewPort.scrollToOffset(this.viewPortOffsetTop);\n        } else if (this.virtualScrollSelectedIndex > -1) {\n          this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n        }\n      }\n      this.virtualAutoScrolled = true;\n    }\n    updateVirtualScrollSelectedIndex(resetOffset) {\n      if (this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length) {\n        if (resetOffset) {\n          this.viewPortOffsetTop = 0;\n        }\n        this.virtualScrollSelectedIndex = this.findOptionIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay);\n      }\n    }\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n        if (!this.overlay.style.minWidth) {\n          this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n      }\n    }\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n    hide() {\n      this.overlayVisible = false;\n      if (this.filter && this.resetFilterOnHide) {\n        this.resetFilter();\n      }\n      if (this.virtualScroll) {\n        this.virtualAutoScrolled = false;\n      }\n      this.cd.markForCheck();\n    }\n    alignOverlay() {\n      if (this.overlay) {\n        if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);else DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n      }\n    }\n    onInputFocus(event) {\n      this.focused = true;\n      this.onFocus.emit(event);\n    }\n    onInputBlur(event) {\n      this.focused = false;\n      this.onBlur.emit(event);\n      if (!this.preventModelTouched) {\n        this.onModelTouched();\n      }\n      this.preventModelTouched = false;\n    }\n    findPrevEnabledOption(index) {\n      let prevEnabledOption;\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (let i = index - 1; 0 <= i; i--) {\n          let option = this.optionsToDisplay[i];\n          if (this.isOptionDisabled(option)) {\n            continue;\n          } else {\n            prevEnabledOption = option;\n            break;\n          }\n        }\n        if (!prevEnabledOption) {\n          for (let i = this.optionsToDisplay.length - 1; i >= index; i--) {\n            let option = this.optionsToDisplay[i];\n            if (this.isOptionDisabled(option)) {\n              continue;\n            } else {\n              prevEnabledOption = option;\n              break;\n            }\n          }\n        }\n      }\n      return prevEnabledOption;\n    }\n    findNextEnabledOption(index) {\n      let nextEnabledOption;\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (let i = index + 1; i < this.optionsToDisplay.length; i++) {\n          let option = this.optionsToDisplay[i];\n          if (this.isOptionDisabled(option)) {\n            continue;\n          } else {\n            nextEnabledOption = option;\n            break;\n          }\n        }\n        if (!nextEnabledOption) {\n          for (let i = 0; i < index; i++) {\n            let option = this.optionsToDisplay[i];\n            if (this.isOptionDisabled(option)) {\n              continue;\n            } else {\n              nextEnabledOption = option;\n              break;\n            }\n          }\n        }\n      }\n      return nextEnabledOption;\n    }\n    onKeydown(event, search) {\n      if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n        return;\n      }\n      switch (event.which) {\n        //down\n        case 40:\n          if (!this.overlayVisible && event.altKey) {\n            this.show();\n          } else {\n            if (this.group) {\n              let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : -1;\n              if (selectedItemIndex !== -1) {\n                let nextItemIndex = selectedItemIndex.itemIndex + 1;\n                if (nextItemIndex < this.getOptionGroupChildren(this.optionsToDisplay[selectedItemIndex.groupIndex]).length) {\n                  this.selectItem(event, this.getOptionGroupChildren(this.optionsToDisplay[selectedItemIndex.groupIndex])[nextItemIndex]);\n                  this.selectedOptionUpdated = true;\n                } else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                  this.selectItem(event, this.getOptionGroupChildren(this.optionsToDisplay[selectedItemIndex.groupIndex + 1])[0]);\n                  this.selectedOptionUpdated = true;\n                }\n              } else {\n                if (this.optionsToDisplay && this.optionsToDisplay.length > 0) {\n                  this.selectItem(event, this.getOptionGroupChildren(this.optionsToDisplay[0])[0]);\n                }\n              }\n            } else {\n              let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : -1;\n              let nextEnabledOption = this.findNextEnabledOption(selectedItemIndex);\n              if (nextEnabledOption) {\n                this.selectItem(event, nextEnabledOption);\n                this.selectedOptionUpdated = true;\n              }\n            }\n          }\n          event.preventDefault();\n          break;\n        //up\n        case 38:\n          if (this.group) {\n            let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : -1;\n            if (selectedItemIndex !== -1) {\n              let prevItemIndex = selectedItemIndex.itemIndex - 1;\n              if (prevItemIndex >= 0) {\n                this.selectItem(event, this.getOptionGroupChildren(this.optionsToDisplay[selectedItemIndex.groupIndex])[prevItemIndex]);\n                this.selectedOptionUpdated = true;\n              } else if (prevItemIndex < 0) {\n                let prevGroup = this.optionsToDisplay[selectedItemIndex.groupIndex - 1];\n                if (prevGroup) {\n                  this.selectItem(event, this.getOptionGroupChildren(prevGroup)[this.getOptionGroupChildren(prevGroup).length - 1]);\n                  this.selectedOptionUpdated = true;\n                }\n              }\n            }\n          } else {\n            let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : -1;\n            let prevEnabledOption = this.findPrevEnabledOption(selectedItemIndex);\n            if (prevEnabledOption) {\n              this.selectItem(event, prevEnabledOption);\n              this.selectedOptionUpdated = true;\n            }\n          }\n          event.preventDefault();\n          break;\n        //space\n        case 32:\n          if (search) {\n            if (!this.overlayVisible) {\n              this.show();\n            } else {\n              this.hide();\n            }\n            event.preventDefault();\n          }\n          break;\n        //enter\n        case 13:\n          if (this.overlayVisible && (!this.filter || this.optionsToDisplay && this.optionsToDisplay.length > 0)) {\n            this.hide();\n          } else if (!this.overlayVisible) {\n            this.show();\n          }\n          event.preventDefault();\n          break;\n        //escape and tab\n        case 27:\n        case 9:\n          this.hide();\n          break;\n        //search item based on keyboard input\n        default:\n          if (search && !event.metaKey) {\n            this.search(event);\n          }\n          break;\n      }\n    }\n    search(event) {\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      const char = event.key;\n      this.previousSearchChar = this.currentSearchChar;\n      this.currentSearchChar = char;\n      if (this.previousSearchChar === this.currentSearchChar) this.searchValue = this.currentSearchChar;else this.searchValue = this.searchValue ? this.searchValue + char : char;\n      let newOption;\n      if (this.group) {\n        let searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : {\n          groupIndex: 0,\n          itemIndex: 0\n        };\n        newOption = this.searchOptionWithinGroup(searchIndex);\n      } else {\n        let searchIndex = this.selectedOption ? this.findOptionIndex(this.getOptionValue(this.selectedOption), this.optionsToDisplay) : -1;\n        newOption = this.searchOption(++searchIndex);\n      }\n      if (newOption && !this.isOptionDisabled(newOption)) {\n        this.selectItem(event, newOption);\n        this.selectedOptionUpdated = true;\n      }\n      this.searchTimeout = setTimeout(() => {\n        this.searchValue = null;\n      }, 250);\n    }\n    searchOption(index) {\n      let option;\n      if (this.searchValue) {\n        option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n        if (!option) {\n          option = this.searchOptionInRange(0, index);\n        }\n      }\n      return option;\n    }\n    searchOptionInRange(start, end) {\n      for (let i = start; i < end; i++) {\n        let opt = this.optionsToDisplay[i];\n        if (this.getOptionLabel(opt).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !this.isOptionDisabled(opt)) {\n          return opt;\n        }\n      }\n      return null;\n    }\n    searchOptionWithinGroup(index) {\n      let option;\n      if (this.searchValue) {\n        for (let i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n          for (let j = index.groupIndex === i ? index.itemIndex + 1 : 0; j < this.getOptionGroupChildren(this.optionsToDisplay[i]).length; j++) {\n            let opt = this.getOptionGroupChildren(this.optionsToDisplay[i])[j];\n            if (this.getOptionLabel(opt).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !this.isOptionDisabled(opt)) {\n              return opt;\n            }\n          }\n        }\n        if (!option) {\n          for (let i = 0; i <= index.groupIndex; i++) {\n            for (let j = 0; j < (index.groupIndex === i ? index.itemIndex : this.getOptionGroupChildren(this.optionsToDisplay[i]).length); j++) {\n              let opt = this.getOptionGroupChildren(this.optionsToDisplay[i])[j];\n              if (this.getOptionLabel(opt).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !this.isOptionDisabled(opt)) {\n                return opt;\n              }\n            }\n          }\n        }\n      }\n      return null;\n    }\n    findOptionIndex(val, opts) {\n      let index = -1;\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          if (val == null && this.getOptionValue(opts[i]) == null || ObjectUtils.equals(val, this.getOptionValue(opts[i]), this.dataKey)) {\n            index = i;\n            break;\n          }\n        }\n      }\n      return index;\n    }\n    findOptionGroupIndex(val, opts) {\n      let groupIndex, itemIndex;\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          groupIndex = i;\n          itemIndex = this.findOptionIndex(val, this.getOptionGroupChildren(opts[i]));\n          if (itemIndex !== -1) {\n            break;\n          }\n        }\n      }\n      if (itemIndex !== -1) {\n        return {\n          groupIndex: groupIndex,\n          itemIndex: itemIndex\n        };\n      } else {\n        return -1;\n      }\n    }\n    findOption(val, opts, inGroup) {\n      if (this.group && !inGroup) {\n        let opt;\n        if (opts && opts.length) {\n          for (let optgroup of opts) {\n            opt = this.findOption(val, this.getOptionGroupChildren(optgroup), true);\n            if (opt) {\n              break;\n            }\n          }\n        }\n        return opt;\n      } else {\n        let index = this.findOptionIndex(val, opts);\n        return index != -1 ? opts[index] : null;\n      }\n    }\n    onFilterInputChange(event) {\n      let inputValue = event.target.value;\n      if (inputValue && inputValue.length) {\n        this._filterValue = inputValue;\n        this.activateFilter();\n      } else {\n        this._filterValue = null;\n        this.optionsToDisplay = this.options;\n      }\n      this.optionsChanged = true;\n      this.onFilter.emit({\n        originalEvent: event,\n        filter: this._filterValue\n      });\n    }\n    activateFilter() {\n      let searchFields = (this.filterBy || this.optionLabel || 'label').split(',');\n      if (this.options && this.options.length) {\n        if (this.group) {\n          let filteredGroups = [];\n          for (let optgroup of this.options) {\n            let filteredSubOptions = this.filterService.filter(this.getOptionGroupChildren(optgroup), searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n            if (filteredSubOptions && filteredSubOptions.length) {\n              filteredGroups.push({\n                ...optgroup,\n                ...{\n                  [this.optionGroupChildren]: filteredSubOptions\n                }\n              });\n            }\n          }\n          this.optionsToDisplay = filteredGroups;\n        } else {\n          this.optionsToDisplay = this.filterService.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        }\n        this.optionsChanged = true;\n      }\n    }\n    applyFocus() {\n      if (this.editable) DomHandler.findSingle(this.el.nativeElement, '.p-dropdown-label.p-inputtext').focus();else DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n    focus() {\n      this.applyFocus();\n    }\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', event => {\n          if (!this.preventDocumentDefault && this.isOutsideClicked(event)) {\n            this.hide();\n            this.unbindDocumentClickListener();\n          }\n          this.preventDocumentDefault = false;\n        });\n      }\n    }\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n    onWindowResize() {\n      if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n        this.hide();\n      }\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild.nativeElement, event => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    clear(event) {\n      this.value = null;\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n      this.updateSelectedOption(this.value);\n      this.updateEditableLabel();\n      this.onClear.emit(event);\n    }\n    onOverlayHide() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n      this.overlay = null;\n      this.itemsWrapper = null;\n      this.onModelTouched();\n    }\n    ngOnDestroy() {\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n      if (this.overlay) {\n        ZIndexUtils.clear(this.overlay);\n      }\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n  }\n  Dropdown.ɵfac = function Dropdown_Factory(t) {\n    return new (t || Dropdown)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.FilterService), i0.ɵɵdirectiveInject(i3.PrimeNGConfig), i0.ɵɵdirectiveInject(i3.OverlayService));\n  };\n  Dropdown.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Dropdown,\n    selectors: [[\"p-dropdown\"]],\n    contentQueries: function Dropdown_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Dropdown_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);\n        i0.ɵɵviewQuery(_c6, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.accessibleViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editableInputViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n    hostVars: 4,\n    hostBindings: function Dropdown_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused || ctx.overlayVisible);\n      }\n    },\n    inputs: {\n      scrollHeight: \"scrollHeight\",\n      filter: \"filter\",\n      name: \"name\",\n      style: \"style\",\n      panelStyle: \"panelStyle\",\n      styleClass: \"styleClass\",\n      panelStyleClass: \"panelStyleClass\",\n      readonly: \"readonly\",\n      required: \"required\",\n      editable: \"editable\",\n      appendTo: \"appendTo\",\n      tabindex: \"tabindex\",\n      placeholder: \"placeholder\",\n      filterPlaceholder: \"filterPlaceholder\",\n      filterLocale: \"filterLocale\",\n      inputId: \"inputId\",\n      selectId: \"selectId\",\n      dataKey: \"dataKey\",\n      filterBy: \"filterBy\",\n      autofocus: \"autofocus\",\n      resetFilterOnHide: \"resetFilterOnHide\",\n      dropdownIcon: \"dropdownIcon\",\n      optionLabel: \"optionLabel\",\n      optionValue: \"optionValue\",\n      optionDisabled: \"optionDisabled\",\n      optionGroupLabel: \"optionGroupLabel\",\n      optionGroupChildren: \"optionGroupChildren\",\n      autoDisplayFirst: \"autoDisplayFirst\",\n      group: \"group\",\n      showClear: \"showClear\",\n      emptyFilterMessage: \"emptyFilterMessage\",\n      emptyMessage: \"emptyMessage\",\n      virtualScroll: \"virtualScroll\",\n      itemSize: \"itemSize\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      ariaFilterLabel: \"ariaFilterLabel\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      filterMatchMode: \"filterMatchMode\",\n      maxlength: \"maxlength\",\n      tooltip: \"tooltip\",\n      tooltipPosition: \"tooltipPosition\",\n      tooltipPositionStyle: \"tooltipPositionStyle\",\n      tooltipStyleClass: \"tooltipStyleClass\",\n      autofocusFilter: \"autofocusFilter\",\n      disabled: \"disabled\",\n      options: \"options\",\n      filterValue: \"filterValue\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onFilter: \"onFilter\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onClick: \"onClick\",\n      onShow: \"onShow\",\n      onHide: \"onHide\",\n      onClear: \"onClear\"\n    },\n    features: [i0.ɵɵProvidersFeature([DROPDOWN_VALUE_ACCESSOR])],\n    decls: 12,\n    vars: 25,\n    consts: [[\"container\", \"\"], [\"in\", \"\"], [\"editableInput\", \"\"], [\"itemslist\", \"\"], [\"filter\", \"\"], [\"virtualScrollList\", \"\"], [\"viewport\", \"\"], [\"emptyFilter\", \"\"], [\"empty\", \"\"], [3, \"click\", \"ngClass\", \"ngStyle\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"readonly\", \"\", \"aria-haspopup\", \"listbox\", \"aria-haspopup\", \"listbox\", \"role\", \"combobox\", 3, \"focus\", \"blur\", \"keydown\", \"disabled\"], [3, \"ngClass\", \"pTooltip\", \"tooltipPosition\", \"positionStyle\", \"tooltipStyleClass\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [\"type\", \"text\", \"class\", \"p-dropdown-label p-inputtext\", \"aria-haspopup\", \"listbox\", 3, \"disabled\", \"click\", \"input\", \"focus\", \"blur\", 4, \"ngIf\"], [\"class\", \"p-dropdown-clear-icon pi pi-times\", 3, \"click\", 4, \"ngIf\"], [\"role\", \"button\", \"aria-label\", \"dropdown trigger\", \"aria-haspopup\", \"listbox\", 1, \"p-dropdown-trigger\"], [1, \"p-dropdown-trigger-icon\", 3, \"ngClass\"], [\"onOverlayAnimationEnd\", \"\", 3, \"ngClass\", \"ngStyle\", \"class\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"pTooltip\", \"tooltipPosition\", \"positionStyle\", \"tooltipStyleClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [\"type\", \"text\", \"aria-haspopup\", \"listbox\", 1, \"p-dropdown-label\", \"p-inputtext\", 3, \"click\", \"input\", \"focus\", \"blur\", \"disabled\"], [1, \"p-dropdown-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"], [\"onOverlayAnimationEnd\", \"\", 3, \"click\", \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\"], [\"class\", \"p-dropdown-header\", 4, \"ngIf\"], [1, \"p-dropdown-items-wrapper\"], [\"role\", \"listbox\", 1, \"p-dropdown-items\", 3, \"ngClass\"], [\"class\", \"p-dropdown-empty-message\", 4, \"ngIf\"], [1, \"p-dropdown-header\"], [1, \"p-dropdown-filter-container\", 3, \"click\"], [\"type\", \"text\", \"autocomplete\", \"off\", 1, \"p-dropdown-filter\", \"p-inputtext\", \"p-component\", 3, \"keydown.enter\", \"keydown\", \"input\", \"value\"], [1, \"p-dropdown-filter-icon\", \"pi\", \"pi-search\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-dropdown-item-group\"], [4, \"ngIf\", \"ngIfElse\"], [3, \"onClick\", \"option\", \"selected\", \"label\", \"disabled\", \"template\"], [3, \"ngStyle\", \"itemSize\", \"scrolledIndexChange\", 4, \"ngIf\"], [3, \"scrolledIndexChange\", \"ngStyle\", \"itemSize\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [1, \"p-dropdown-empty-message\"]],\n    template: function Dropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 9, 0);\n        i0.ɵɵlistener(\"click\", function Dropdown_Template_div_click_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onMouseclick($event));\n        });\n        i0.ɵɵelementStart(2, \"div\", 10)(3, \"input\", 11, 1);\n        i0.ɵɵlistener(\"focus\", function Dropdown_Template_input_focus_3_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputFocus($event));\n        })(\"blur\", function Dropdown_Template_input_blur_3_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputBlur($event));\n        })(\"keydown\", function Dropdown_Template_input_keydown_3_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onKeydown($event, true));\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(5, Dropdown_span_5_Template, 3, 13, \"span\", 12)(6, Dropdown_span_6_Template, 2, 4, \"span\", 13)(7, Dropdown_input_7_Template, 2, 4, \"input\", 14)(8, Dropdown_i_8_Template, 1, 0, \"i\", 15);\n        i0.ɵɵelementStart(9, \"div\", 16);\n        i0.ɵɵelement(10, \"span\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, Dropdown_div_11_Template, 12, 23, \"div\", 18);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(20, _c7, ctx.disabled, ctx.overlayVisible, ctx.focused, ctx.showClear && !ctx.disabled))(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"placeholder\", ctx.placeholder)(\"aria-label\", ctx.ariaLabel)(\"aria-expanded\", false)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"tabindex\", ctx.tabindex)(\"autofocus\", ctx.autofocus)(\"aria-activedescendant\", ctx.overlayVisible ? ctx.labelId : null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.editable && ctx.label != null);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.editable && ctx.label == null);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.editable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.value != null && ctx.showClear && !ctx.disabled);\n        i0.ɵɵadvance();\n        i0.ɵɵattribute(\"aria-expanded\", ctx.overlayVisible);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngClass\", ctx.dropdownIcon);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    dependencies: [DropdownItem, i4.CdkVirtualScrollViewport, i2.NgClass, i2.NgStyle, i2.NgIf, i5.Tooltip, i2.NgTemplateOutlet, i2.NgForOf, i4.CdkFixedSizeVirtualScroll, i4.CdkVirtualForOf],\n    styles: [\".p-dropdown{display:inline-flex;cursor:pointer;position:relative;-webkit-user-select:none;user-select:none}.p-dropdown-clear-icon{position:absolute;top:50%;margin-top:-.5rem}.p-dropdown-trigger{display:flex;align-items:center;justify-content:center;flex-shrink:0}.p-dropdown-label{display:block;white-space:nowrap;overflow:hidden;flex:1 1 auto;width:1%;text-overflow:ellipsis;cursor:pointer}.p-dropdown-label-empty{overflow:hidden;visibility:hidden}input.p-dropdown-label{cursor:default}.p-dropdown .p-dropdown-panel{min-width:100%}.p-dropdown-panel{position:absolute;top:0;left:0}.p-dropdown-items-wrapper{overflow:auto}.p-dropdown-item{cursor:pointer;font-weight:400;white-space:nowrap;position:relative;overflow:hidden}.p-dropdown-items{margin:0;padding:0;list-style-type:none}.p-dropdown-filter{width:100%}.p-dropdown-filter-container{position:relative}.p-dropdown-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-fluid .p-dropdown{display:flex}.p-fluid .p-dropdown .p-dropdown-label{width:1%}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return Dropdown;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DropdownModule = /*#__PURE__*/(() => {\n  class DropdownModule {}\n  DropdownModule.ɵfac = function DropdownModule_Factory(t) {\n    return new (t || DropdownModule)();\n  };\n  DropdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DropdownModule\n  });\n  DropdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule], SharedModule, ScrollingModule]\n  });\n  return DropdownModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DROPDOWN_VALUE_ACCESSOR, Dropdown, DropdownItem, DropdownModule };\n//# sourceMappingURL=primeng-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}