{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppRoutingModule = exports.SettingsResolver = exports.UserResolver = exports.ReportResolver = exports.OrganizationResolver = exports.TeamFormResolver = exports.TeamResolver = exports.VulnerabilityResolver = exports.VulnerabilitiesResolver = exports.AssessmentsResolver = exports.AssessmentResolver = exports.AssetResolver = exports.AssetsResolver = void 0;\nconst router_1 = require(\"@angular/router\");\nconst dashboard_component_1 = require(\"../app/dashboard/dashboard.component\");\nconst assessments_component_1 = require(\"../app/assessments/assessments.component\");\nconst organization_component_1 = require(\"./organization/organization.component\");\nconst vulnerability_component_1 = require(\"./vulnerability/vulnerability.component\");\nconst vuln_form_component_1 = require(\"./vuln-form/vuln-form.component\");\nconst org_form_component_1 = require(\"./org-form/org-form.component\");\nconst asset_form_component_1 = require(\"./asset-form/asset-form.component\");\nconst assessment_form_component_1 = require(\"./assessment-form/assessment-form.component\");\nconst report_component_1 = require(\"./report/report.component\");\nconst page_not_found_component_1 = require(\"./page-not-found/page-not-found.component\");\nconst auth_guard_1 = require(\"./auth.guard\");\nconst admin_guard_1 = require(\"./admin.guard\");\nconst login_component_1 = require(\"./login/login.component\");\nconst forgot_password_component_1 = require(\"./forgot-password/forgot-password.component\");\nconst password_reset_component_1 = require(\"./password-reset/password-reset.component\");\nconst invite_user_component_1 = require(\"./administration/invite-user/invite-user.component\");\nconst administration_component_1 = require(\"./administration/administration.component\");\nconst team_form_component_1 = require(\"./team-form/team-form.component\");\nconst register_component_1 = require(\"./register/register.component\");\nconst user_profile_component_1 = require(\"./user-profile/user-profile.component\");\nconst user_form_component_1 = require(\"./user-form/user-form.component\");\nconst settings_component_1 = require(\"./administration/settings/settings.component\");\nconst email_validate_component_1 = require(\"./email-validate/email-validate.component\");\nconst rxjs_1 = require(\"rxjs\");\nconst map_1 = require(\"rxjs/internal/operators/map\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"../app/app.service\");\nconst i2 = require(\"./user.service\");\nconst i3 = require(\"./team.service\");\nconst i4 = require(\"@angular/router\");\nlet AssetsResolver = /*#__PURE__*/(() => {\n  class AssetsResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getOrganizationAssets(route.params.orgId);\n    }\n    static #_ = this.ɵfac = function AssetsResolver_Factory(t) {\n      return new (t || AssetsResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AssetsResolver,\n      factory: AssetsResolver.ɵfac\n    });\n  }\n  return AssetsResolver;\n})();\nexports.AssetsResolver = AssetsResolver;\nlet AssetResolver = /*#__PURE__*/(() => {\n  class AssetResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getAsset(route.params.assetId, route.params.id);\n    }\n    static #_ = this.ɵfac = function AssetResolver_Factory(t) {\n      return new (t || AssetResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AssetResolver,\n      factory: AssetResolver.ɵfac\n    });\n  }\n  return AssetResolver;\n})();\nexports.AssetResolver = AssetResolver;\nlet AssessmentResolver = /*#__PURE__*/(() => {\n  class AssessmentResolver {\n    constructor(apiService, userService) {\n      this.apiService = apiService;\n      this.userService = userService;\n    }\n    resolve(route) {\n      if (route.params.assetId && route.params.assessmentId && route.params.orgId) {\n        return (0, rxjs_1.forkJoin)([this.apiService.getAssessment(route.params.assetId, route.params.assessmentId), this.userService.getTesters(route.params.orgId)]).pipe((0, map_1.map)(result => {\n          return {\n            assessment: result[0],\n            testers: result[1]\n          };\n        }));\n      } else {\n        return this.userService.getTesters(route.params.orgId);\n      }\n    }\n    static #_ = this.ɵfac = function AssessmentResolver_Factory(t) {\n      return new (t || AssessmentResolver)(i0.ɵɵinject(i1.AppService), i0.ɵɵinject(i2.UserService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AssessmentResolver,\n      factory: AssessmentResolver.ɵfac\n    });\n  }\n  return AssessmentResolver;\n})();\nexports.AssessmentResolver = AssessmentResolver;\nlet AssessmentsResolver = /*#__PURE__*/(() => {\n  class AssessmentsResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getAssessments(route.params.assetId);\n    }\n    static #_ = this.ɵfac = function AssessmentsResolver_Factory(t) {\n      return new (t || AssessmentsResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AssessmentsResolver,\n      factory: AssessmentsResolver.ɵfac\n    });\n  }\n  return AssessmentsResolver;\n})();\nexports.AssessmentsResolver = AssessmentsResolver;\nlet VulnerabilitiesResolver = /*#__PURE__*/(() => {\n  class VulnerabilitiesResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getVulnerabilities(route.params.assessmentId);\n    }\n    static #_ = this.ɵfac = function VulnerabilitiesResolver_Factory(t) {\n      return new (t || VulnerabilitiesResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VulnerabilitiesResolver,\n      factory: VulnerabilitiesResolver.ɵfac\n    });\n  }\n  return VulnerabilitiesResolver;\n})();\nexports.VulnerabilitiesResolver = VulnerabilitiesResolver;\nlet VulnerabilityResolver = /*#__PURE__*/(() => {\n  class VulnerabilityResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getVulnerability(route.params.vulnId);\n    }\n    static #_ = this.ɵfac = function VulnerabilityResolver_Factory(t) {\n      return new (t || VulnerabilityResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VulnerabilityResolver,\n      factory: VulnerabilityResolver.ɵfac\n    });\n  }\n  return VulnerabilityResolver;\n})();\nexports.VulnerabilityResolver = VulnerabilityResolver;\nlet TeamResolver = /*#__PURE__*/(() => {\n  class TeamResolver {\n    constructor(teamService) {\n      this.teamService = teamService;\n    }\n    resolve(route) {\n      return this.teamService.getTeamById(route.params.teamId);\n    }\n    static #_ = this.ɵfac = function TeamResolver_Factory(t) {\n      return new (t || TeamResolver)(i0.ɵɵinject(i3.TeamService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamResolver,\n      factory: TeamResolver.ɵfac\n    });\n  }\n  return TeamResolver;\n})();\nexports.TeamResolver = TeamResolver;\nlet TeamFormResolver = /*#__PURE__*/(() => {\n  class TeamFormResolver {\n    constructor(appService, userService) {\n      this.appService = appService;\n      this.userService = userService;\n    }\n    resolve(route) {\n      return (0, rxjs_1.forkJoin)([this.appService.getOrganizations(), this.userService.getAllUsers()]).pipe((0, map_1.map)(result => {\n        return {\n          organizations: result[0],\n          activeUsers: result[1]\n        };\n      }));\n    }\n    static #_ = this.ɵfac = function TeamFormResolver_Factory(t) {\n      return new (t || TeamFormResolver)(i0.ɵɵinject(i1.AppService), i0.ɵɵinject(i2.UserService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamFormResolver,\n      factory: TeamFormResolver.ɵfac\n    });\n  }\n  return TeamFormResolver;\n})();\nexports.TeamFormResolver = TeamFormResolver;\nlet OrganizationResolver = /*#__PURE__*/(() => {\n  class OrganizationResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getOrganizationById(route.params.id);\n    }\n    static #_ = this.ɵfac = function OrganizationResolver_Factory(t) {\n      return new (t || OrganizationResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrganizationResolver,\n      factory: OrganizationResolver.ɵfac\n    });\n  }\n  return OrganizationResolver;\n})();\nexports.OrganizationResolver = OrganizationResolver;\nlet ReportResolver = /*#__PURE__*/(() => {\n  class ReportResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getReport(route.params.assessmentId);\n    }\n    static #_ = this.ɵfac = function ReportResolver_Factory(t) {\n      return new (t || ReportResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReportResolver,\n      factory: ReportResolver.ɵfac\n    });\n  }\n  return ReportResolver;\n})();\nexports.ReportResolver = ReportResolver;\nlet UserResolver = /*#__PURE__*/(() => {\n  class UserResolver {\n    constructor(userService) {\n      this.userService = userService;\n    }\n    resolve() {\n      return this.userService.getUser();\n    }\n    static #_ = this.ɵfac = function UserResolver_Factory(t) {\n      return new (t || UserResolver)(i0.ɵɵinject(i2.UserService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserResolver,\n      factory: UserResolver.ɵfac\n    });\n  }\n  return UserResolver;\n})();\nexports.UserResolver = UserResolver;\nlet SettingsResolver = /*#__PURE__*/(() => {\n  class SettingsResolver {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    resolve(route) {\n      return this.apiService.getConfig();\n    }\n    static #_ = this.ɵfac = function SettingsResolver_Factory(t) {\n      return new (t || SettingsResolver)(i0.ɵɵinject(i1.AppService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SettingsResolver,\n      factory: SettingsResolver.ɵfac\n    });\n  }\n  return SettingsResolver;\n})();\nexports.SettingsResolver = SettingsResolver;\nconst routes = [{\n  path: '',\n  redirectTo: 'dashboard',\n  pathMatch: 'full'\n}, {\n  path: 'login',\n  component: login_component_1.LoginComponent\n}, {\n  path: 'forgot-password',\n  component: forgot_password_component_1.ForgotPasswordComponent\n}, {\n  path: 'password-reset/:uuid',\n  component: password_reset_component_1.PasswordResetComponent\n}, {\n  path: 'register/:uuid',\n  component: register_component_1.RegisterComponent\n}, {\n  path: 'email/validate/:uuid',\n  component: email_validate_component_1.EmailValidateComponent\n}, {\n  path: 'user/profile',\n  component: user_profile_component_1.UserProfileComponent,\n  resolve: {\n    user: UserResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'settings',\n  component: settings_component_1.SettingsComponent,\n  resolve: {\n    settings: SettingsResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'invite',\n  component: invite_user_component_1.InviteUserComponent,\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'administration',\n  component: administration_component_1.AdministrationComponent,\n  canActivate: [admin_guard_1.AdminGuard]\n}, {\n  path: 'administration',\n  component: administration_component_1.AdministrationComponent,\n  canActivate: [admin_guard_1.AdminGuard]\n}, {\n  path: 'administration/team/:teamId',\n  component: team_form_component_1.TeamFormComponent,\n  canActivate: [admin_guard_1.AdminGuard],\n  resolve: {\n    result: TeamFormResolver\n  }\n}, {\n  path: 'administration/team',\n  component: team_form_component_1.TeamFormComponent,\n  canActivate: [admin_guard_1.AdminGuard],\n  resolve: {\n    result: TeamFormResolver\n  }\n}, {\n  path: 'administration/user/create',\n  canActivate: [admin_guard_1.AdminGuard],\n  component: user_form_component_1.UserFormComponent\n}, {\n  path: 'administration/user/invite',\n  component: invite_user_component_1.InviteUserComponent,\n  canActivate: [admin_guard_1.AdminGuard]\n}, {\n  path: 'dashboard',\n  component: dashboard_component_1.DashboardComponent,\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId',\n  component: assessments_component_1.AssessmentsComponent,\n  resolve: {\n    assessments: AssessmentsResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId',\n  component: organization_component_1.OrganizationComponent,\n  resolve: {\n    assets: AssetsResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId/vulnerability',\n  component: vulnerability_component_1.VulnerabilityComponent,\n  resolve: {\n    vulnerabilities: VulnerabilitiesResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId/vuln-form/:vulnId',\n  component: vuln_form_component_1.VulnFormComponent,\n  resolve: {\n    vulnInfo: VulnerabilityResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId/vuln-form',\n  component: vuln_form_component_1.VulnFormComponent,\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization-form',\n  component: org_form_component_1.OrgFormComponent,\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization-form/:id',\n  component: org_form_component_1.OrgFormComponent,\n  resolve: {\n    organization: OrganizationResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:id/asset-form',\n  component: asset_form_component_1.AssetFormComponent,\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:id/asset-form/:assetId',\n  component: asset_form_component_1.AssetFormComponent,\n  resolve: {\n    asset: AssetResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment',\n  component: assessment_form_component_1.AssessmentFormComponent,\n  resolve: {\n    result: AssessmentResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId',\n  component: assessment_form_component_1.AssessmentFormComponent,\n  resolve: {\n    result: AssessmentResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId/report',\n  component: report_component_1.ReportComponent,\n  resolve: {\n    report: ReportResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: 'organization/:orgId/asset/:assetId/assessment/:assessmentId/report/puppeteer',\n  component: report_component_1.ReportComponent,\n  resolve: {\n    report: ReportResolver\n  },\n  canActivate: [auth_guard_1.AuthGuard]\n}, {\n  path: '**',\n  component: page_not_found_component_1.PageNotFoundComponent\n}];\nlet AppRoutingModule = /*#__PURE__*/(() => {\n  class AppRoutingModule {\n    static #_ = this.ɵfac = function AppRoutingModule_Factory(t) {\n      return new (t || AppRoutingModule)();\n    };\n    static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppRoutingModule\n    });\n    static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [AssetResolver, AssetsResolver, AssessmentsResolver, VulnerabilitiesResolver, OrganizationResolver, AssessmentResolver, VulnerabilityResolver, ReportResolver, UserResolver, SettingsResolver, TeamFormResolver, TeamResolver],\n      imports: [router_1.RouterModule.forRoot(routes, {\n        useHash: true,\n        relativeLinkResolution: 'legacy'\n      }), router_1.RouterModule]\n    });\n  }\n  return AppRoutingModule;\n})();\nexports.AppRoutingModule = AppRoutingModule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}