{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ZIndexUtils } from 'primeng/utils';\nimport * as i1 from 'primeng/api';\nlet Tooltip = /*#__PURE__*/(() => {\n  class Tooltip {\n    constructor(el, zone, config) {\n      this.el = el;\n      this.zone = zone;\n      this.config = config;\n      this.escape = true;\n      this._tooltipOptions = {\n        tooltipPosition: 'right',\n        tooltipEvent: 'hover',\n        appendTo: 'body',\n        tooltipZIndex: 'auto',\n        escape: true,\n        positionTop: 0,\n        positionLeft: 0\n      };\n    }\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(val) {\n      this._disabled = val;\n      this.deactivate();\n    }\n    ngAfterViewInit() {\n      this.zone.runOutsideAngular(() => {\n        if (this.getOption('tooltipEvent') === 'hover') {\n          this.mouseEnterListener = this.onMouseEnter.bind(this);\n          this.mouseLeaveListener = this.onMouseLeave.bind(this);\n          this.clickListener = this.onClick.bind(this);\n          this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);\n          this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);\n          this.el.nativeElement.addEventListener('click', this.clickListener);\n        } else if (this.getOption('tooltipEvent') === 'focus') {\n          this.focusListener = this.onFocus.bind(this);\n          this.blurListener = this.onBlur.bind(this);\n          let target = this.getTarget(this.el.nativeElement);\n          target.addEventListener('focus', this.focusListener);\n          target.addEventListener('blur', this.blurListener);\n        }\n      });\n    }\n    ngOnChanges(simpleChange) {\n      if (simpleChange.tooltipPosition) {\n        this.setOption({\n          tooltipPosition: simpleChange.tooltipPosition.currentValue\n        });\n      }\n      if (simpleChange.tooltipEvent) {\n        this.setOption({\n          tooltipEvent: simpleChange.tooltipEvent.currentValue\n        });\n      }\n      if (simpleChange.appendTo) {\n        this.setOption({\n          appendTo: simpleChange.appendTo.currentValue\n        });\n      }\n      if (simpleChange.positionStyle) {\n        this.setOption({\n          positionStyle: simpleChange.positionStyle.currentValue\n        });\n      }\n      if (simpleChange.tooltipStyleClass) {\n        this.setOption({\n          tooltipStyleClass: simpleChange.tooltipStyleClass.currentValue\n        });\n      }\n      if (simpleChange.tooltipZIndex) {\n        this.setOption({\n          tooltipZIndex: simpleChange.tooltipZIndex.currentValue\n        });\n      }\n      if (simpleChange.escape) {\n        this.setOption({\n          escape: simpleChange.escape.currentValue\n        });\n      }\n      if (simpleChange.showDelay) {\n        this.setOption({\n          showDelay: simpleChange.showDelay.currentValue\n        });\n      }\n      if (simpleChange.hideDelay) {\n        this.setOption({\n          hideDelay: simpleChange.hideDelay.currentValue\n        });\n      }\n      if (simpleChange.life) {\n        this.setOption({\n          life: simpleChange.life.currentValue\n        });\n      }\n      if (simpleChange.positionTop) {\n        this.setOption({\n          positionTop: simpleChange.positionTop.currentValue\n        });\n      }\n      if (simpleChange.positionLeft) {\n        this.setOption({\n          positionLeft: simpleChange.positionLeft.currentValue\n        });\n      }\n      if (simpleChange.disabled) {\n        this.setOption({\n          disabled: simpleChange.disabled.currentValue\n        });\n      }\n      if (simpleChange.text) {\n        this.setOption({\n          tooltipLabel: simpleChange.text.currentValue\n        });\n        if (this.active) {\n          if (simpleChange.text.currentValue) {\n            if (this.container && this.container.offsetParent) {\n              this.updateText();\n              this.align();\n            } else {\n              this.show();\n            }\n          } else {\n            this.hide();\n          }\n        }\n      }\n      if (simpleChange.tooltipOptions) {\n        this._tooltipOptions = {\n          ...this._tooltipOptions,\n          ...simpleChange.tooltipOptions.currentValue\n        };\n        this.deactivate();\n        if (this.active) {\n          if (this.getOption('tooltipLabel')) {\n            if (this.container && this.container.offsetParent) {\n              this.updateText();\n              this.align();\n            } else {\n              this.show();\n            }\n          } else {\n            this.hide();\n          }\n        }\n      }\n    }\n    onMouseEnter(e) {\n      if (!this.container && !this.showTimeout) {\n        this.activate();\n      }\n    }\n    onMouseLeave(e) {\n      this.deactivate();\n    }\n    onFocus(e) {\n      this.activate();\n    }\n    onBlur(e) {\n      this.deactivate();\n    }\n    onClick(e) {\n      this.deactivate();\n    }\n    activate() {\n      this.active = true;\n      this.clearHideTimeout();\n      if (this.getOption('showDelay')) this.showTimeout = setTimeout(() => {\n        this.show();\n      }, this.getOption('showDelay'));else this.show();\n      if (this.getOption('life')) {\n        let duration = this.getOption('showDelay') ? this.getOption('life') + this.getOption('showDelay') : this.getOption('life');\n        this.hideTimeout = setTimeout(() => {\n          this.hide();\n        }, duration);\n      }\n    }\n    deactivate() {\n      this.active = false;\n      this.clearShowTimeout();\n      if (this.getOption('hideDelay')) {\n        this.clearHideTimeout(); //life timeout\n        this.hideTimeout = setTimeout(() => {\n          this.hide();\n        }, this.getOption('hideDelay'));\n      } else {\n        this.hide();\n      }\n    }\n    create() {\n      if (this.container) {\n        this.clearHideTimeout();\n        this.remove();\n      }\n      this.container = document.createElement('div');\n      let tooltipArrow = document.createElement('div');\n      tooltipArrow.className = 'p-tooltip-arrow';\n      this.container.appendChild(tooltipArrow);\n      this.tooltipText = document.createElement('div');\n      this.tooltipText.className = 'p-tooltip-text';\n      this.updateText();\n      if (this.getOption('positionStyle')) {\n        this.container.style.position = this.getOption('positionStyle');\n      }\n      this.container.appendChild(this.tooltipText);\n      if (this.getOption('appendTo') === 'body') document.body.appendChild(this.container);else if (this.getOption('appendTo') === 'target') DomHandler.appendChild(this.container, this.el.nativeElement);else DomHandler.appendChild(this.container, this.getOption('appendTo'));\n      this.container.style.display = 'inline-block';\n    }\n    show() {\n      if (!this.getOption('tooltipLabel') || this.getOption('disabled')) {\n        return;\n      }\n      this.create();\n      this.align();\n      DomHandler.fadeIn(this.container, 250);\n      if (this.getOption('tooltipZIndex') === 'auto') ZIndexUtils.set('tooltip', this.container, this.config.zIndex.tooltip);else this.container.style.zIndex = this.getOption('tooltipZIndex');\n      this.bindDocumentResizeListener();\n      this.bindScrollListener();\n    }\n    hide() {\n      if (this.getOption('tooltipZIndex') === 'auto') {\n        ZIndexUtils.clear(this.container);\n      }\n      this.remove();\n    }\n    updateText() {\n      if (this.getOption('escape')) {\n        this.tooltipText.innerHTML = '';\n        this.tooltipText.appendChild(document.createTextNode(this.getOption('tooltipLabel')));\n      } else {\n        this.tooltipText.innerHTML = this.getOption('tooltipLabel');\n      }\n    }\n    align() {\n      let position = this.getOption('tooltipPosition');\n      switch (position) {\n        case 'top':\n          this.alignTop();\n          if (this.isOutOfBounds()) {\n            this.alignBottom();\n            if (this.isOutOfBounds()) {\n              this.alignRight();\n              if (this.isOutOfBounds()) {\n                this.alignLeft();\n              }\n            }\n          }\n          break;\n        case 'bottom':\n          this.alignBottom();\n          if (this.isOutOfBounds()) {\n            this.alignTop();\n            if (this.isOutOfBounds()) {\n              this.alignRight();\n              if (this.isOutOfBounds()) {\n                this.alignLeft();\n              }\n            }\n          }\n          break;\n        case 'left':\n          this.alignLeft();\n          if (this.isOutOfBounds()) {\n            this.alignRight();\n            if (this.isOutOfBounds()) {\n              this.alignTop();\n              if (this.isOutOfBounds()) {\n                this.alignBottom();\n              }\n            }\n          }\n          break;\n        case 'right':\n          this.alignRight();\n          if (this.isOutOfBounds()) {\n            this.alignLeft();\n            if (this.isOutOfBounds()) {\n              this.alignTop();\n              if (this.isOutOfBounds()) {\n                this.alignBottom();\n              }\n            }\n          }\n          break;\n      }\n    }\n    getHostOffset() {\n      if (this.getOption('appendTo') === 'body' || this.getOption('appendTo') === 'target') {\n        let offset = this.el.nativeElement.getBoundingClientRect();\n        let targetLeft = offset.left + DomHandler.getWindowScrollLeft();\n        let targetTop = offset.top + DomHandler.getWindowScrollTop();\n        return {\n          left: targetLeft,\n          top: targetTop\n        };\n      } else {\n        return {\n          left: 0,\n          top: 0\n        };\n      }\n    }\n    alignRight() {\n      this.preAlign('right');\n      let hostOffset = this.getHostOffset();\n      let left = hostOffset.left + DomHandler.getOuterWidth(this.el.nativeElement);\n      let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n      this.container.style.left = left + this.getOption('positionLeft') + 'px';\n      this.container.style.top = top + this.getOption('positionTop') + 'px';\n    }\n    alignLeft() {\n      this.preAlign('left');\n      let hostOffset = this.getHostOffset();\n      let left = hostOffset.left - DomHandler.getOuterWidth(this.container);\n      let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n      this.container.style.left = left + this.getOption('positionLeft') + 'px';\n      this.container.style.top = top + this.getOption('positionTop') + 'px';\n    }\n    alignTop() {\n      this.preAlign('top');\n      let hostOffset = this.getHostOffset();\n      let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n      let top = hostOffset.top - DomHandler.getOuterHeight(this.container);\n      this.container.style.left = left + this.getOption('positionLeft') + 'px';\n      this.container.style.top = top + this.getOption('positionTop') + 'px';\n    }\n    alignBottom() {\n      this.preAlign('bottom');\n      let hostOffset = this.getHostOffset();\n      let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n      let top = hostOffset.top + DomHandler.getOuterHeight(this.el.nativeElement);\n      this.container.style.left = left + this.getOption('positionLeft') + 'px';\n      this.container.style.top = top + this.getOption('positionTop') + 'px';\n    }\n    setOption(option) {\n      this._tooltipOptions = {\n        ...this._tooltipOptions,\n        ...option\n      };\n    }\n    getOption(option) {\n      return this._tooltipOptions[option];\n    }\n    getTarget(el) {\n      return DomHandler.hasClass(el, 'p-inputwrapper') ? DomHandler.findSingle(el, 'input') : el;\n    }\n    preAlign(position) {\n      this.container.style.left = -999 + 'px';\n      this.container.style.top = -999 + 'px';\n      let defaultClassName = 'p-tooltip p-component p-tooltip-' + position;\n      this.container.className = this.getOption('tooltipStyleClass') ? defaultClassName + ' ' + this.getOption('tooltipStyleClass') : defaultClassName;\n    }\n    isOutOfBounds() {\n      let offset = this.container.getBoundingClientRect();\n      let targetTop = offset.top;\n      let targetLeft = offset.left;\n      let width = DomHandler.getOuterWidth(this.container);\n      let height = DomHandler.getOuterHeight(this.container);\n      let viewport = DomHandler.getViewport();\n      return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;\n    }\n    onWindowResize(e) {\n      this.hide();\n    }\n    bindDocumentResizeListener() {\n      this.zone.runOutsideAngular(() => {\n        this.resizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.resizeListener);\n      });\n    }\n    unbindDocumentResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n          if (this.container) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    unbindEvents() {\n      if (this.getOption('tooltipEvent') === 'hover') {\n        this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);\n        this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);\n        this.el.nativeElement.removeEventListener('click', this.clickListener);\n      } else if (this.getOption('tooltipEvent') === 'focus') {\n        let target = this.getTarget(this.el.nativeElement);\n        target.removeEventListener('focus', this.focusListener);\n        target.removeEventListener('blur', this.blurListener);\n      }\n      this.unbindDocumentResizeListener();\n    }\n    remove() {\n      if (this.container && this.container.parentElement) {\n        if (this.getOption('appendTo') === 'body') document.body.removeChild(this.container);else if (this.getOption('appendTo') === 'target') this.el.nativeElement.removeChild(this.container);else DomHandler.removeChild(this.container, this.getOption('appendTo'));\n      }\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n      this.clearTimeouts();\n      this.container = null;\n      this.scrollHandler = null;\n    }\n    clearShowTimeout() {\n      if (this.showTimeout) {\n        clearTimeout(this.showTimeout);\n        this.showTimeout = null;\n      }\n    }\n    clearHideTimeout() {\n      if (this.hideTimeout) {\n        clearTimeout(this.hideTimeout);\n        this.hideTimeout = null;\n      }\n    }\n    clearTimeouts() {\n      this.clearShowTimeout();\n      this.clearHideTimeout();\n    }\n    ngOnDestroy() {\n      this.unbindEvents();\n      if (this.container) {\n        ZIndexUtils.clear(this.container);\n      }\n      this.remove();\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n    }\n  }\n  Tooltip.ɵfac = function Tooltip_Factory(t) {\n    return new (t || Tooltip)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.PrimeNGConfig));\n  };\n  Tooltip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Tooltip,\n    selectors: [[\"\", \"pTooltip\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      tooltipPosition: \"tooltipPosition\",\n      tooltipEvent: \"tooltipEvent\",\n      appendTo: \"appendTo\",\n      positionStyle: \"positionStyle\",\n      tooltipStyleClass: \"tooltipStyleClass\",\n      tooltipZIndex: \"tooltipZIndex\",\n      escape: \"escape\",\n      showDelay: \"showDelay\",\n      hideDelay: \"hideDelay\",\n      life: \"life\",\n      positionTop: \"positionTop\",\n      positionLeft: \"positionLeft\",\n      text: [0, \"pTooltip\", \"text\"],\n      disabled: [0, \"tooltipDisabled\", \"disabled\"],\n      tooltipOptions: \"tooltipOptions\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return Tooltip;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TooltipModule = /*#__PURE__*/(() => {\n  class TooltipModule {}\n  TooltipModule.ɵfac = function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  };\n  TooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TooltipModule\n  });\n  TooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return TooltipModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tooltip, TooltipModule };\n//# sourceMappingURL=primeng-tooltip.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}