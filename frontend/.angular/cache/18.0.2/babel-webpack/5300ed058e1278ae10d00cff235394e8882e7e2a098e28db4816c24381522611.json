{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlertService = void 0;\nconst router_1 = require(\"@angular/router\");\nconst Alert_1 = require(\"../classes/Alert\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/router\");\nlet AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor(router) {\n      this.router = router;\n      this.subject = new rxjs_1.Subject();\n      this.keepAfterRouteChange = false;\n      this.router.events.subscribe(event => {\n        if (event instanceof router_1.NavigationStart) {\n          if (this.keepAfterRouteChange) {\n            // only keep for a single route change\n            this.keepAfterRouteChange = false;\n          } else {\n            // clear alert messages\n            this.clear();\n          }\n        }\n      });\n    }\n    // enable subscribing to alerts observable\n    onAlert(alertId) {\n      return this.subject.asObservable().pipe((0, operators_1.filter)(x => x && x.alertId === alertId));\n    }\n    // convenience methods\n    success(message, alertId) {\n      this.alert(new Alert_1.Alert({\n        message,\n        type: Alert_1.AlertType.Success,\n        alertId\n      }));\n    }\n    error(message, alertId) {\n      this.alert(new Alert_1.Alert({\n        message,\n        type: Alert_1.AlertType.Error,\n        alertId\n      }));\n    }\n    info(message, alertId) {\n      this.alert(new Alert_1.Alert({\n        message,\n        type: Alert_1.AlertType.Info,\n        alertId\n      }));\n    }\n    warn(message, alertId) {\n      this.alert(new Alert_1.Alert({\n        message,\n        type: Alert_1.AlertType.Warning,\n        alertId\n      }));\n    }\n    clear(alertId) {\n      this.subject.next(new Alert_1.Alert({\n        alertId\n      }));\n    }\n    // main alert method\n    alert(alert) {\n      this.keepAfterRouteChange = alert.keepAfterRouteChange;\n      this.subject.next(alert);\n    }\n    static #_ = this.ɵfac = function AlertService_Factory(t) {\n      return new (t || AlertService)(i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlertService,\n      factory: AlertService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AlertService;\n})();\nexports.AlertService = AlertService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}