{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AssetFormComponent = void 0;\nconst forms_1 = require(\"@angular/forms\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"@angular/forms\");\nconst i2 = require(\"../app.service\");\nconst i3 = require(\"@angular/router\");\nconst i4 = require(\"../alert/alert.service\");\nconst i5 = require(\"../auth.service\");\nconst i6 = require(\"@angular/common\");\nconst i7 = require(\"primeng/inputtext\");\nconst i8 = require(\"primeng/button\");\nconst i9 = require(\"primeng/password\");\nfunction AssetFormComponent_button_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function AssetFormComponent_button_23_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.purgeJiraInfo());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r1.canAddApiKey);\n  }\n}\nfunction AssetFormComponent_button_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 19);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.assetForm.valid);\n  }\n}\nlet AssetFormComponent = /*#__PURE__*/(() => {\n  class AssetFormComponent {\n    constructor(fb, appService, route, activatedRoute, alertService, authService) {\n      this.fb = fb;\n      this.appService = appService;\n      this.route = route;\n      this.activatedRoute = activatedRoute;\n      this.alertService = alertService;\n      this.authService = authService;\n      this.keyPlaceholder = '************************';\n      this.canAddApiKey = true;\n      this.createForm();\n    }\n    ngOnInit() {\n      this.activatedRoute.data.subscribe(({\n        asset\n      }) => {\n        this.isAdmin = this.authService.isAdmin();\n        if (asset) {\n          this.assetModel = asset;\n          if (!this.isAdmin) {\n            this.assetForm.disable();\n          }\n          this.rebuildForm();\n          if (asset.jira) {\n            this.canAddApiKey = false;\n          } else {\n            this.canAddApiKey = true;\n          }\n        }\n      });\n      this.activatedRoute.params.subscribe(params => {\n        this.orgId = params.id;\n        this.assetId = params.assetId;\n      });\n    }\n    /**\n     * Function responsible to detect changes for the form and rebuild it\n     */\n    ngOnChanges() {\n      this.rebuildForm();\n    }\n    /**\n     * Function responsible for creating the reactive form in Angular\n     */\n    createForm() {\n      this.assetForm = this.fb.group({\n        name: ['', [forms_1.Validators.required]],\n        jira: this.fb.group({\n          username: ['', []],\n          host: ['', []],\n          apiKey: ['', []]\n        })\n      });\n    }\n    /**\n     * Function responsible for rebuilding the reactive form in Angular\n     */\n    rebuildForm() {\n      this.assetForm.reset({\n        name: this.assetModel.name,\n        jira: {\n          username: this.assetModel?.jira?.username,\n          host: this.assetModel?.jira?.host,\n          apiKey: this.assetModel?.jira?.apiKey\n        }\n      });\n    }\n    /**\n     * Function responsible for processing the data from the reactive from\n     * @param asset data object holding all the form data\n     */\n    onSubmit(asset) {\n      this.assetModel = asset.value;\n      this.assetModel.organization = this.orgId;\n      this.assetModel.id = this.assetId;\n      if (!this.canAddApiKey) {\n        this.assetModel.jira = null;\n      }\n      this.createOrUpdateAsset(this.assetModel);\n    }\n    /**\n     * Function responsible for sending the user back to Assets listing\n     */\n    navigateToAssets() {\n      this.route.navigate([`organization/${this.orgId}`]);\n    }\n    purgeJiraInfo() {\n      const r = confirm(`Purge API Key for Asset: \"${this.assetModel.name}\"?`);\n      if (r) {\n        this.appService.purgeJira(this.assetId).subscribe(res => {\n          this.alertService.success(res);\n          this.appService.getAsset(this.assetId, this.orgId).subscribe(asset => {\n            this.assetModel = asset;\n            this.canAddApiKey = true;\n            this.rebuildForm();\n          });\n        });\n      }\n    }\n    /**\n     * Function responsible for creating or updating an asset tied to\n     * an organization\n     * @param asset object holding all the asset data\n     */\n    createOrUpdateAsset(asset) {\n      if (this.assetId) {\n        this.appService.updateAsset(asset).subscribe(res => {\n          this.navigateToAssets();\n          this.alertService.success(res);\n        });\n      } else {\n        this.appService.createAsset(asset).subscribe(res => {\n          this.navigateToAssets();\n          this.alertService.success(res);\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AssetFormComponent_Factory(t) {\n      return new (t || AssetFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AppService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AssetFormComponent,\n      selectors: [[\"app-asset-form\"]],\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 26,\n      vars: 7,\n      consts: [[1, \"col-4\", \"mx-auto\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"for\", \"assetName\"], [\"pInputText\", \"\", \"formControlName\", \"name\", \"type\", \"text\", \"id\", \"assetName\", 1, \"form-control\"], [1, \"card\"], [1, \"card-body\"], [1, \"col-md-12\", \"text-center\"], [\"formGroupName\", \"jira\"], [\"for\", \"username\"], [\"formControlName\", \"username\", \"type\", \"text\", \"id\", \"username\", \"pInputText\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"for\", \"host\", 2, \"margin-top\", \"10px\"], [\"pInputText\", \"\", \"formControlName\", \"host\", \"type\", \"text\", \"id\", \"host\", 1, \"form-control\", 3, \"readonly\"], [\"for\", \"apiKey\", 2, \"margin-top\", \"10px\"], [\"pPassword\", \"\", \"promptLabel\", \"Enter the API key\", \"formControlName\", \"apiKey\", \"type\", \"password\", \"id\", \"apiKey\", 1, \"form-control\", 3, \"readonly\", \"placeholder\"], [\"pButton\", \"\", \"type\", \"button\", \"class\", \"float-right btn btn-warning\", \"label\", \"Purge\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"class\", \"btn btn-primary float-right\", \"type\", \"submit\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Submit\", 3, \"disabled\", 4, \"ngIf\"], [\"pButton\", \"\", \"type\", \"button\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Back to Assets\", 1, \"btn\", \"btn-secondary\", \"float-right\", 2, \"margin-right\", \"5px\", 3, \"click\"], [\"pButton\", \"\", \"type\", \"button\", \"label\", \"Purge\", 1, \"float-right\", \"btn\", \"btn-warning\", 3, \"click\", \"disabled\"], [\"pButton\", \"\", \"type\", \"submit\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"label\", \"Submit\", 1, \"btn\", \"btn-primary\", \"float-right\", 3, \"disabled\"]],\n      template: function AssetFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function AssetFormComponent_Template_form_ngSubmit_1_listener() {\n            return ctx.onSubmit(ctx.assetForm);\n          });\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3);\n          i0.ɵɵtext(4, \"Asset Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"input\", 4);\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6)(8, \"div\", 7)(9, \"h5\");\n          i0.ɵɵtext(10, \"Jira Integration\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"hr\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 8)(13, \"label\", 9);\n          i0.ɵɵtext(14, \"Username\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"input\", 10);\n          i0.ɵɵelementStart(16, \"label\", 11);\n          i0.ɵɵtext(17, \"Host\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 12);\n          i0.ɵɵelementStart(19, \"label\", 13);\n          i0.ɵɵtext(20, \"API Key\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"br\");\n          i0.ɵɵtemplate(23, AssetFormComponent_button_23_Template, 1, 1, \"button\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(24, AssetFormComponent_button_24_Template, 1, 1, \"button\", 16);\n          i0.ɵɵelementStart(25, \"button\", 17);\n          i0.ɵɵlistener(\"click\", function AssetFormComponent_Template_button_click_25_listener() {\n            return ctx.navigateToAssets();\n          });\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.assetForm);\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"readonly\", !ctx.canAddApiKey);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"readonly\", !ctx.canAddApiKey);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"readonly\", !ctx.canAddApiKey)(\"placeholder\", ctx.canAddApiKey ? \"\" : ctx.keyPlaceholder);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isAdmin);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isAdmin);\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i7.InputText, i8.ButtonDirective, i9.PasswordDirective]\n    });\n  }\n  return AssetFormComponent;\n})();\nexports.AssetFormComponent = AssetFormComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}